
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  0000133c  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000133c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000081  008001a4  008001a4  00001474  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002a9  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000109e  00000000  00000000  0000181d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000802  00000000  00000000  000028bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cd3  00000000  00000000  000030bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00003d90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000494  00000000  00000000  00004368  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      28:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      40:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_16>
      44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      5c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

0000008c <__c.1834>:
      8c:	49 6d 70 54 6f 6b 09 09 49 6d 70 72 69 6d 65 20     ImpTok..Imprime 
      9c:	6c 6f 73 20 74 6f 6b 65 6e 73 20 65 6e 76 69 61     los tokens envia
      ac:	64 6f 73 20 61 20 49 6d 70 54 6f 6b 0a 00           dos a ImpTok..

000000ba <__c.1832>:
      ba:	3f 20 09 09 09 49 6d 70 72 69 6d 65 20 65 73 74     ? ...Imprime est
      ca:	61 20 61 79 75 64 61 0a 0a 00                       a ayuda...

000000d4 <__c.1830>:
      d4:	50 61 72 61 20 09 09 44 65 74 69 65 6e 65 20 65     Para ..Detiene e
      e4:	6c 20 6d 6f 74 6f 72 0a 00                          l motor..

000000ed <__c.1828>:
      ed:	47 69 72 61 44 65 72 20 09 09 47 69 72 61 20 65     GiraDer ..Gira e
      fd:	6c 20 6d 6f 74 6f 72 20 68 61 63 69 61 20 6c 61     l motor hacia la
     10d:	20 64 65 72 65 63 68 61 0a 00                        derecha..

00000117 <__c.1826>:
     117:	47 69 72 61 49 7a 71 20 09 09 47 69 72 61 20 65     GiraIzq ..Gira e
     127:	6c 20 6d 6f 74 6f 72 20 68 61 63 69 61 20 6c 61     l motor hacia la
     137:	20 69 7a 71 75 69 65 72 64 61 0a 00                  izquierda..

00000143 <__c.1824>:
     143:	66 65 63 68 61 20 09 09 44 65 73 70 6c 69 65 67     fecha ..Desplieg
     153:	61 20 6c 61 20 66 65 63 68 61 0a 00                 a la fecha..

0000015f <__c.1822>:
     15f:	68 6f 72 61 20 09 09 44 65 73 70 6c 69 65 67 61     hora ..Despliega
     16f:	20 6c 61 20 68 6f 72 61 0a 00                        la hora..

00000179 <__c.1820>:
     179:	61 70 61 67 20 09 09 41 70 61 67 61 20 74 6f 64     apag ..Apaga tod
     189:	6f 73 20 6c 6f 73 20 6c 65 64 73 20 64 65 6c 20     os los leds del 
     199:	70 75 65 72 74 6f 20 43 0a 00                       puerto C..

000001a3 <__c.1818>:
     1a3:	65 6e 63 20 28 61 72 67 73 29 20 09 45 6e 63 69     enc (args) .Enci
     1b3:	65 6e 64 65 20 6c 65 64 73 20 70 75 65 72 74 6f     ende leds puerto
     1c3:	20 43 20 63 6f 6e 20 6c 6f 73 20 61 72 67 75 6d      C con los argum
     1d3:	65 6e 74 6f 73 0a 00                                entos..

000001da <__c.1816>:
     1da:	43 6f 6d 61 6e 64 6f 73 3a 0a 20 00                 Comandos:. .

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d0 e1       	ldi	r29, 0x10	; 16
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	11 e0       	ldi	r17, 0x01	; 1
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	ec e3       	ldi	r30, 0x3C	; 60
     1fa:	f3 e1       	ldi	r31, 0x13	; 19
     1fc:	00 e0       	ldi	r16, 0x00	; 0
     1fe:	0b bf       	out	0x3b, r16	; 59
     200:	02 c0       	rjmp	.+4      	; 0x206 <__do_copy_data+0x14>
     202:	07 90       	elpm	r0, Z+
     204:	0d 92       	st	X+, r0
     206:	a4 3a       	cpi	r26, 0xA4	; 164
     208:	b1 07       	cpc	r27, r17
     20a:	d9 f7       	brne	.-10     	; 0x202 <__do_copy_data+0x10>

0000020c <__do_clear_bss>:
     20c:	12 e0       	ldi	r17, 0x02	; 2
     20e:	a4 ea       	ldi	r26, 0xA4	; 164
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	01 c0       	rjmp	.+2      	; 0x216 <.do_clear_bss_start>

00000214 <.do_clear_bss_loop>:
     214:	1d 92       	st	X+, r1

00000216 <.do_clear_bss_start>:
     216:	a5 32       	cpi	r26, 0x25	; 37
     218:	b1 07       	cpc	r27, r17
     21a:	e1 f7       	brne	.-8      	; 0x214 <.do_clear_bss_loop>
     21c:	0e 94 76 03 	call	0x6ec	; 0x6ec <main>
     220:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <_exit>

00000224 <__bad_interrupt>:
     224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <hd44780_outnibble>:
/*
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
     228:	98 2f       	mov	r25, r24
  CLR(PORT, HD44780_RW);
     22a:	d9 98       	cbi	0x1b, 1	; 27
  if (rs)
     22c:	66 23       	and	r22, r22
     22e:	11 f0       	breq	.+4      	; 0x234 <hd44780_outnibble+0xc>
    SET(PORT, HD44780_RS);
     230:	d8 9a       	sbi	0x1b, 0	; 27
     232:	01 c0       	rjmp	.+2      	; 0x236 <hd44780_outnibble+0xe>
  else
    CLR(PORT, HD44780_RS);
     234:	d8 98       	cbi	0x1b, 0	; 27
  ASSIGN(PORT, HD44780_D4, n);
     236:	8b b3       	in	r24, 0x1b	; 27
     238:	92 95       	swap	r25
     23a:	90 7f       	andi	r25, 0xF0	; 240
     23c:	8f 70       	andi	r24, 0x0F	; 15
     23e:	89 2b       	or	r24, r25
     240:	8b bb       	out	0x1b, r24	; 27
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     242:	da 9a       	sbi	0x1b, 2	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	8a 95       	dec	r24
     248:	f1 f7       	brne	.-4      	; 0x246 <hd44780_outnibble+0x1e>
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
  else
    x = 0;
  CLR(PORT, HD44780_E);
     24a:	da 98       	cbi	0x1b, 2	; 27
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  ASSIGN(PORT, HD44780_D4, n);
  (void)hd44780_pulse_e(false);
}
     24c:	08 95       	ret

0000024e <hd44780_outbyte>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	18 2f       	mov	r17, r24
     254:	06 2f       	mov	r16, r22
  hd44780_outnibble(b >> 4, rs);
     256:	82 95       	swap	r24
     258:	8f 70       	andi	r24, 0x0F	; 15
     25a:	0e 94 14 01 	call	0x228	; 0x228 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
     25e:	81 2f       	mov	r24, r17
     260:	8f 70       	andi	r24, 0x0F	; 15
     262:	60 2f       	mov	r22, r16
     264:	0e 94 14 01 	call	0x228	; 0x228 <hd44780_outnibble>
}
     268:	1f 91       	pop	r17
     26a:	0f 91       	pop	r16
     26c:	08 95       	ret

0000026e <hd44780_innibble>:
static uint8_t
hd44780_innibble(uint8_t rs)
{
  uint8_t x;

  SET(PORT, HD44780_RW);
     26e:	d9 9a       	sbi	0x1b, 1	; 27
  ASSIGN(DDR, HD44780_D4, 0x00);
     270:	9a b3       	in	r25, 0x1a	; 26
     272:	9f 70       	andi	r25, 0x0F	; 15
     274:	9a bb       	out	0x1a, r25	; 26
  if (rs)
     276:	88 23       	and	r24, r24
     278:	11 f0       	breq	.+4      	; 0x27e <hd44780_innibble+0x10>
    SET(PORT, HD44780_RS);
     27a:	d8 9a       	sbi	0x1b, 0	; 27
     27c:	01 c0       	rjmp	.+2      	; 0x280 <hd44780_innibble+0x12>
  else
    CLR(PORT, HD44780_RS);
     27e:	d8 98       	cbi	0x1b, 0	; 27
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     280:	da 9a       	sbi	0x1b, 2	; 27
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	8a 95       	dec	r24
     286:	f1 f7       	brne	.-4      	; 0x284 <hd44780_innibble+0x16>
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
    x = READ(PIN, HD44780_D4);
     288:	89 b3       	in	r24, 0x19	; 25
  else
    x = 0;
  CLR(PORT, HD44780_E);
     28a:	da 98       	cbi	0x1b, 2	; 27
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
  ASSIGN(DDR, HD44780_D4, 0x0F);
     28c:	9a b3       	in	r25, 0x1a	; 26
     28e:	90 6f       	ori	r25, 0xF0	; 240
     290:	9a bb       	out	0x1a, r25	; 26
  CLR(PORT, HD44780_RW);
     292:	d9 98       	cbi	0x1b, 1	; 27

  return x;
}
     294:	82 95       	swap	r24
     296:	8f 70       	andi	r24, 0x0F	; 15
     298:	08 95       	ret

0000029a <hd44780_inbyte>:
/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t
hd44780_inbyte(uint8_t rs)
{
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	18 2f       	mov	r17, r24
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
     2a0:	0e 94 37 01 	call	0x26e	; 0x26e <hd44780_innibble>
     2a4:	08 2f       	mov	r16, r24
     2a6:	02 95       	swap	r16
     2a8:	00 7f       	andi	r16, 0xF0	; 240
  x |= hd44780_innibble(rs);
     2aa:	81 2f       	mov	r24, r17
     2ac:	0e 94 37 01 	call	0x26e	; 0x26e <hd44780_innibble>

  return x;
}
     2b0:	80 2b       	or	r24, r16
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	08 95       	ret

000002b8 <hd44780_wait_ready>:
 */
void
hd44780_wait_ready(bool longwait)
{
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 4d 01 	call	0x29a	; 0x29a <hd44780_inbyte>
     2be:	87 fd       	sbrc	r24, 7
     2c0:	fb cf       	rjmp	.-10     	; 0x2b8 <hd44780_wait_ready>
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
     2c2:	08 95       	ret

000002c4 <hd44780_init>:
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
  SET(DDR, HD44780_RS);
     2c4:	d0 9a       	sbi	0x1a, 0	; 26
  SET(DDR, HD44780_RW);
     2c6:	d1 9a       	sbi	0x1a, 1	; 26
  SET(DDR, HD44780_E);
     2c8:	d2 9a       	sbi	0x1a, 2	; 26
  ASSIGN(DDR, HD44780_D4, 0x0F);
     2ca:	8a b3       	in	r24, 0x1a	; 26
     2cc:	80 6f       	ori	r24, 0xF0	; 240
     2ce:	8a bb       	out	0x1a, r24	; 26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	92 ea       	ldi	r25, 0xA2	; 162
     2d4:	01 97       	sbiw	r24, 0x01	; 1
     2d6:	f1 f7       	brne	.-4      	; 0x2d4 <hd44780_init+0x10>

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	0e 94 14 01 	call	0x228	; 0x228 <hd44780_outnibble>
     2e0:	87 e4       	ldi	r24, 0x47	; 71
     2e2:	9c e2       	ldi	r25, 0x2C	; 44
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <hd44780_init+0x20>
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     2e8:	83 e0       	ldi	r24, 0x03	; 3
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	0e 94 14 01 	call	0x228	; 0x228 <hd44780_outnibble>
     2f0:	84 e1       	ldi	r24, 0x14	; 20
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <hd44780_init+0x30>
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     2f8:	83 e0       	ldi	r24, 0x03	; 3
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	0e 94 14 01 	call	0x228	; 0x228 <hd44780_outnibble>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     300:	88 e8       	ldi	r24, 0x88	; 136
     302:	8a 95       	dec	r24
     304:	f1 f7       	brne	.-4      	; 0x302 <hd44780_init+0x3e>
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	0e 94 14 01 	call	0x228	; 0x228 <hd44780_outnibble>
  hd44780_wait_ready(false);
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
     314:	88 e2       	ldi	r24, 0x28	; 40
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	0e 94 27 01 	call	0x24e	; 0x24e <hd44780_outbyte>
  hd44780_wait_ready(false);
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
     322:	88 e0       	ldi	r24, 0x08	; 8
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	0e 94 27 01 	call	0x24e	; 0x24e <hd44780_outbyte>
  hd44780_wait_ready(false);
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <hd44780_wait_ready>
}
     330:	08 95       	ret

00000332 <hd44780_powerdown>:
 * Prepare the LCD controller pins for powerdown.
 */
void
hd44780_powerdown(void)
{
  ASSIGN(PORT, HD44780_D4, 0);
     332:	8b b3       	in	r24, 0x1b	; 27
     334:	8f 70       	andi	r24, 0x0F	; 15
     336:	8b bb       	out	0x1b, r24	; 27
  CLR(PORT, HD44780_RS);
     338:	d8 98       	cbi	0x1b, 0	; 27
  CLR(PORT, HD44780_RW);
     33a:	d9 98       	cbi	0x1b, 1	; 27
  CLR(PORT, HD44780_E);
     33c:	da 98       	cbi	0x1b, 2	; 27
}
     33e:	08 95       	ret

00000340 <ApagLeds>:
	PORTC = ~i;
}

void ApagLeds(char ** args)
{
	PORTC = 0xFF;
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	85 bb       	out	0x15, r24	; 21
}
     344:	08 95       	ret

00000346 <ImprimeAyuda>:
	    }
}

void ImprimeAyuda()
{
	printf_P(PSTR("Comandos:\n "));
     346:	00 d0       	rcall	.+0      	; 0x348 <ImprimeAyuda+0x2>
     348:	8a ed       	ldi	r24, 0xDA	; 218
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	ed b7       	in	r30, 0x3d	; 61
     34e:	fe b7       	in	r31, 0x3e	; 62
     350:	92 83       	std	Z+2, r25	; 0x02
     352:	81 83       	std	Z+1, r24	; 0x01
     354:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
	printf_P(PSTR("enc (args) 	Enciende leds puerto C con los argumentos\n"));
     358:	83 ea       	ldi	r24, 0xA3	; 163
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	ed b7       	in	r30, 0x3d	; 61
     35e:	fe b7       	in	r31, 0x3e	; 62
     360:	92 83       	std	Z+2, r25	; 0x02
     362:	81 83       	std	Z+1, r24	; 0x01
     364:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
	printf_P(PSTR("apag 		Apaga todos los leds del puerto C\n"));
     368:	89 e7       	ldi	r24, 0x79	; 121
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	92 83       	std	Z+2, r25	; 0x02
     372:	81 83       	std	Z+1, r24	; 0x01
     374:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
	printf_P(PSTR("hora 		Despliega la hora\n"));
     378:	8f e5       	ldi	r24, 0x5F	; 95
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	ed b7       	in	r30, 0x3d	; 61
     37e:	fe b7       	in	r31, 0x3e	; 62
     380:	92 83       	std	Z+2, r25	; 0x02
     382:	81 83       	std	Z+1, r24	; 0x01
     384:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
	printf_P(PSTR("fecha 		Despliega la fecha\n"));
     388:	83 e4       	ldi	r24, 0x43	; 67
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	ed b7       	in	r30, 0x3d	; 61
     38e:	fe b7       	in	r31, 0x3e	; 62
     390:	92 83       	std	Z+2, r25	; 0x02
     392:	81 83       	std	Z+1, r24	; 0x01
     394:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
	printf_P(PSTR("GiraIzq 		Gira el motor hacia la izquierda\n"));
     398:	87 e1       	ldi	r24, 0x17	; 23
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	ed b7       	in	r30, 0x3d	; 61
     39e:	fe b7       	in	r31, 0x3e	; 62
     3a0:	92 83       	std	Z+2, r25	; 0x02
     3a2:	81 83       	std	Z+1, r24	; 0x01
     3a4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
	printf_P(PSTR("GiraDer 		Gira el motor hacia la derecha\n"));
     3a8:	8d ee       	ldi	r24, 0xED	; 237
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	ed b7       	in	r30, 0x3d	; 61
     3ae:	fe b7       	in	r31, 0x3e	; 62
     3b0:	92 83       	std	Z+2, r25	; 0x02
     3b2:	81 83       	std	Z+1, r24	; 0x01
     3b4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
	printf_P(PSTR("Para 		Detiene el motor\n"));
     3b8:	84 ed       	ldi	r24, 0xD4	; 212
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	ed b7       	in	r30, 0x3d	; 61
     3be:	fe b7       	in	r31, 0x3e	; 62
     3c0:	92 83       	std	Z+2, r25	; 0x02
     3c2:	81 83       	std	Z+1, r24	; 0x01
     3c4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
	printf_P(PSTR("? 			Imprime esta ayuda\n\n"));
     3c8:	8a eb       	ldi	r24, 0xBA	; 186
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	ed b7       	in	r30, 0x3d	; 61
     3ce:	fe b7       	in	r31, 0x3e	; 62
     3d0:	92 83       	std	Z+2, r25	; 0x02
     3d2:	81 83       	std	Z+1, r24	; 0x01
     3d4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
	printf_P(PSTR("ImpTok		Imprime los tokens enviados a ImpTok\n"));
     3d8:	8c e8       	ldi	r24, 0x8C	; 140
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	ed b7       	in	r30, 0x3d	; 61
     3de:	fe b7       	in	r31, 0x3e	; 62
     3e0:	92 83       	std	Z+2, r25	; 0x02
     3e2:	81 83       	std	Z+1, r24	; 0x01
     3e4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <printf_P>
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
}
     3ec:	08 95       	ret

000003ee <mem>:
        }
    }
}

void mem(char ** args)
{
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	fc 01       	movw	r30, r24
	if (args[0]==NULL)
     3f8:	80 81       	ld	r24, Z
     3fa:	91 81       	ldd	r25, Z+1	; 0x01
     3fc:	89 2b       	or	r24, r25
     3fe:	61 f1       	breq	.+88     	; 0x458 <mem+0x6a>
	     return;
     400:	c0 e6       	ldi	r28, 0x60	; 96
     402:	d0 e0       	ldi	r29, 0x00	; 0
	    	Dir_fin = args[1];
	    	pm = 0x60;

	    	while ( pm < 0x70  )
	        {
	            printf("%d\t%d\t%c\n",pm,*pm,*pm);
     404:	00 e0       	ldi	r16, 0x00	; 0
     406:	11 e0       	ldi	r17, 0x01	; 1
     408:	88 81       	ld	r24, Y
     40a:	2d b7       	in	r18, 0x3d	; 61
     40c:	3e b7       	in	r19, 0x3e	; 62
     40e:	28 50       	subi	r18, 0x08	; 8
     410:	30 40       	sbci	r19, 0x00	; 0
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	3e bf       	out	0x3e, r19	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	2d bf       	out	0x3d, r18	; 61
     41c:	ed b7       	in	r30, 0x3d	; 61
     41e:	fe b7       	in	r31, 0x3e	; 62
     420:	31 96       	adiw	r30, 0x01	; 1
     422:	ad b7       	in	r26, 0x3d	; 61
     424:	be b7       	in	r27, 0x3e	; 62
     426:	12 96       	adiw	r26, 0x02	; 2
     428:	1c 93       	st	X, r17
     42a:	0e 93       	st	-X, r16
     42c:	11 97       	sbiw	r26, 0x01	; 1
     42e:	d3 83       	std	Z+3, r29	; 0x03
     430:	c2 83       	std	Z+2, r28	; 0x02
     432:	84 83       	std	Z+4, r24	; 0x04
     434:	15 82       	std	Z+5, r1	; 0x05
     436:	86 83       	std	Z+6, r24	; 0x06
     438:	17 82       	std	Z+7, r1	; 0x07
     43a:	0e 94 4a 06 	call	0xc94	; 0xc94 <printf>
	            pm++;
     43e:	21 96       	adiw	r28, 0x01	; 1

	    	Dir_ini = args[0];
	    	Dir_fin = args[1];
	    	pm = 0x60;

	    	while ( pm < 0x70  )
     440:	2d b7       	in	r18, 0x3d	; 61
     442:	3e b7       	in	r19, 0x3e	; 62
     444:	28 5f       	subi	r18, 0xF8	; 248
     446:	3f 4f       	sbci	r19, 0xFF	; 255
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	3e bf       	out	0x3e, r19	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	2d bf       	out	0x3d, r18	; 61
     452:	c0 37       	cpi	r28, 0x70	; 112
     454:	d1 05       	cpc	r29, r1
     456:	c1 f6       	brne	.-80     	; 0x408 <mem+0x1a>
	        {
	            printf("%d\t%d\t%c\n",pm,*pm,*pm);
	            pm++;
	        }
	    }
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	08 95       	ret

00000462 <ImprimeTokens>:
{
	PORTC = 0xFF;
}

void ImprimeTokens(char ** args)
{
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	fc 01       	movw	r30, r24
    if (args[0]==NULL)
     468:	80 81       	ld	r24, Z
     46a:	91 81       	ldd	r25, Z+1	; 0x01
     46c:	89 2b       	or	r24, r25
     46e:	41 f0       	breq	.+16     	; 0x480 <ImprimeTokens+0x1e>
        return;
     470:	ef 01       	movw	r28, r30
     472:	02 c0       	rjmp	.+4      	; 0x478 <ImprimeTokens+0x16>
    {
        int i=0;

        while ( args[i] != NULL )
        {
            printf("%s\n",args[i]);
     474:	0e 94 7f 06 	call	0xcfe	; 0xcfe <puts>
        return;
    else
    {
        int i=0;

        while ( args[i] != NULL )
     478:	89 91       	ld	r24, Y+
     47a:	99 91       	ld	r25, Y+
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	d1 f7       	brne	.-12     	; 0x474 <ImprimeTokens+0x12>
        {
            printf("%s\n",args[i]);
            i++;
        }
    }
}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <EncLeds>:

	return 0;
}

void EncLeds(char ** args)
{
     486:	fc 01       	movw	r30, r24
	uint8_t i;
	i = atoi(*args);
     488:	80 81       	ld	r24, Z
     48a:	91 81       	ldd	r25, Z+1	; 0x01
     48c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <atoi>
	PORTC = ~i;
     490:	80 95       	com	r24
     492:	85 bb       	out	0x15, r24	; 21
}
     494:	08 95       	ret

00000496 <EjeCmd>:
	return EjeCmd(cmd,args);
}


uint8_t EjeCmd(char * c, char ** args)
{
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	ec 01       	movw	r28, r24
     4a0:	8b 01       	movw	r16, r22
	if (strcmp(c, "enc") == 0) {
     4a2:	6a e0       	ldi	r22, 0x0A	; 10
     4a4:	71 e0       	ldi	r23, 0x01	; 1
     4a6:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     4aa:	00 97       	sbiw	r24, 0x00	; 0
     4ac:	21 f4       	brne	.+8      	; 0x4b6 <EjeCmd+0x20>
		EncLeds(args);
     4ae:	c8 01       	movw	r24, r16
     4b0:	0e 94 43 02 	call	0x486	; 0x486 <EncLeds>
     4b4:	5e c0       	rjmp	.+188    	; 0x572 <EjeCmd+0xdc>
	}

	else if (strcmp(c, "apag") == 0) {
     4b6:	ce 01       	movw	r24, r28
     4b8:	6e e0       	ldi	r22, 0x0E	; 14
     4ba:	71 e0       	ldi	r23, 0x01	; 1
     4bc:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	19 f4       	brne	.+6      	; 0x4ca <EjeCmd+0x34>
	PORTC = ~i;
}

void ApagLeds(char ** args)
{
	PORTC = 0xFF;
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	85 bb       	out	0x15, r24	; 21
     4c8:	54 c0       	rjmp	.+168    	; 0x572 <EjeCmd+0xdc>

	else if (strcmp(c, "apag") == 0) {
		ApagLeds(args);
	}

	else if (strcmp(c, "hora") == 0) {
     4ca:	ce 01       	movw	r24, r28
     4cc:	63 e1       	ldi	r22, 0x13	; 19
     4ce:	71 e0       	ldi	r23, 0x01	; 1
     4d0:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	19 f4       	brne	.+6      	; 0x4de <EjeCmd+0x48>
		MuestraHora();
     4d8:	0e 94 85 04 	call	0x90a	; 0x90a <MuestraHora>
     4dc:	4a c0       	rjmp	.+148    	; 0x572 <EjeCmd+0xdc>
	}

	else if (strcmp(c, "fecha") == 0) {
     4de:	ce 01       	movw	r24, r28
     4e0:	68 e1       	ldi	r22, 0x18	; 24
     4e2:	71 e0       	ldi	r23, 0x01	; 1
     4e4:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     4e8:	00 97       	sbiw	r24, 0x00	; 0
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <EjeCmd+0x5c>
		MuestraFecha();
     4ec:	0e 94 59 04 	call	0x8b2	; 0x8b2 <MuestraFecha>
     4f0:	40 c0       	rjmp	.+128    	; 0x572 <EjeCmd+0xdc>
	}

	else if (strcmp(c, "GiraIzq") == 0) {
     4f2:	ce 01       	movw	r24, r28
     4f4:	6e e1       	ldi	r22, 0x1E	; 30
     4f6:	71 e0       	ldi	r23, 0x01	; 1
     4f8:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     4fc:	00 97       	sbiw	r24, 0x00	; 0
     4fe:	19 f4       	brne	.+6      	; 0x506 <EjeCmd+0x70>
		GiraIzq();
     500:	0e 94 98 03 	call	0x730	; 0x730 <GiraIzq>
     504:	36 c0       	rjmp	.+108    	; 0x572 <EjeCmd+0xdc>
	}

	else if (strcmp(c, "GiraDer") == 0) {
     506:	ce 01       	movw	r24, r28
     508:	66 e2       	ldi	r22, 0x26	; 38
     50a:	71 e0       	ldi	r23, 0x01	; 1
     50c:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     510:	00 97       	sbiw	r24, 0x00	; 0
     512:	19 f4       	brne	.+6      	; 0x51a <EjeCmd+0x84>
		GiraDer();
     514:	0e 94 9a 03 	call	0x734	; 0x734 <GiraDer>
     518:	2c c0       	rjmp	.+88     	; 0x572 <EjeCmd+0xdc>
	}

	else if (strcmp(c, "Para") == 0) {
     51a:	ce 01       	movw	r24, r28
     51c:	6e e2       	ldi	r22, 0x2E	; 46
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     524:	00 97       	sbiw	r24, 0x00	; 0
     526:	19 f4       	brne	.+6      	; 0x52e <EjeCmd+0x98>
		ParaMotor();
     528:	0e 94 9e 03 	call	0x73c	; 0x73c <ParaMotor>
     52c:	22 c0       	rjmp	.+68     	; 0x572 <EjeCmd+0xdc>
	}

	else if (strcmp(c, "?") == 0) {
     52e:	ce 01       	movw	r24, r28
     530:	63 e3       	ldi	r22, 0x33	; 51
     532:	71 e0       	ldi	r23, 0x01	; 1
     534:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	19 f4       	brne	.+6      	; 0x542 <EjeCmd+0xac>
			ImprimeAyuda();
     53c:	0e 94 a3 01 	call	0x346	; 0x346 <ImprimeAyuda>
     540:	18 c0       	rjmp	.+48     	; 0x572 <EjeCmd+0xdc>
	}

     else if (strcmp(c, "ImpTok") == 0)
     542:	ce 01       	movw	r24, r28
     544:	65 e3       	ldi	r22, 0x35	; 53
     546:	71 e0       	ldi	r23, 0x01	; 1
     548:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     54c:	00 97       	sbiw	r24, 0x00	; 0
     54e:	39 f4       	brne	.+14     	; 0x55e <EjeCmd+0xc8>
     {
        printf("%s\n",c);
     550:	ce 01       	movw	r24, r28
     552:	0e 94 7f 06 	call	0xcfe	; 0xcfe <puts>
        ImprimeTokens(args);
     556:	c8 01       	movw	r24, r16
     558:	0e 94 31 02 	call	0x462	; 0x462 <ImprimeTokens>
     55c:	0a c0       	rjmp	.+20     	; 0x572 <EjeCmd+0xdc>
     }
     else if (strcmp(c, "MEM")==0)
     55e:	ce 01       	movw	r24, r28
     560:	6c e3       	ldi	r22, 0x3C	; 60
     562:	71 e0       	ldi	r23, 0x01	; 1
     564:	0e 94 b1 05 	call	0xb62	; 0xb62 <strcmp>
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	19 f4       	brne	.+6      	; 0x572 <EjeCmd+0xdc>
     {
    	 mem(args);
     56c:	c8 01       	movw	r24, r16
     56e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <mem>
     }

	return 0;
}
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <ProcesaTokens>:
		ProcesaTokens(comando);
	}
}

uint8_t ProcesaTokens(char * buff)
{
     57e:	cf 92       	push	r12
     580:	df 92       	push	r13
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	df 93       	push	r29
     58c:	cf 93       	push	r28
     58e:	cd b7       	in	r28, 0x3d	; 61
     590:	de b7       	in	r29, 0x3e	; 62
     592:	2c 97       	sbiw	r28, 0x0c	; 12
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	6c 01       	movw	r12, r24
	int	idx = 0;
	char *cmd, *ptr, *args[MAX_ARGS];

	if (strtok(buff, DELIMITADOR) == NULL)
     5a0:	60 e4       	ldi	r22, 0x40	; 64
     5a2:	71 e0       	ldi	r23, 0x01	; 1
     5a4:	0e 94 ac 05 	call	0xb58	; 0xb58 <strtok>
     5a8:	89 2b       	or	r24, r25
     5aa:	11 f4       	brne	.+4      	; 0x5b0 <ProcesaTokens+0x32>
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	25 c0       	rjmp	.+74     	; 0x5fa <ProcesaTokens+0x7c>
     5b0:	7e 01       	movw	r14, r28
     5b2:	08 94       	sec
     5b4:	e1 1c       	adc	r14, r1
     5b6:	f1 1c       	adc	r15, r1
     5b8:	00 e0       	ldi	r16, 0x00	; 0
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <ProcesaTokens+0x52>

	cmd = buff;

	while( (ptr = strtok(NULL, DELIMITADOR) ) != NULL) //inicializamos ptr y evaluamos a la misma vez que no sea nulo
	{
		args[idx] = ptr;
     5be:	f7 01       	movw	r30, r14
     5c0:	81 93       	st	Z+, r24
     5c2:	91 93       	st	Z+, r25
     5c4:	7f 01       	movw	r14, r30

		if (++idx == (MAX_ARGS-1))
     5c6:	0f 5f       	subi	r16, 0xFF	; 255
     5c8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ca:	05 30       	cpi	r16, 0x05	; 5
     5cc:	11 05       	cpc	r17, r1
     5ce:	41 f0       	breq	.+16     	; 0x5e0 <ProcesaTokens+0x62>
	if (strtok(buff, DELIMITADOR) == NULL)
		return 1;

	cmd = buff;

	while( (ptr = strtok(NULL, DELIMITADOR) ) != NULL) //inicializamos ptr y evaluamos a la misma vez que no sea nulo
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	60 e4       	ldi	r22, 0x40	; 64
     5d6:	71 e0       	ldi	r23, 0x01	; 1
     5d8:	0e 94 ac 05 	call	0xb58	; 0xb58 <strtok>
     5dc:	00 97       	sbiw	r24, 0x00	; 0
     5de:	79 f7       	brne	.-34     	; 0x5be <ProcesaTokens+0x40>

		if (++idx == (MAX_ARGS-1))
		break;
	}

	args[idx] = NULL;
     5e0:	00 0f       	add	r16, r16
     5e2:	11 1f       	adc	r17, r17
     5e4:	be 01       	movw	r22, r28
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	06 0f       	add	r16, r22
     5ec:	17 1f       	adc	r17, r23
     5ee:	f8 01       	movw	r30, r16
     5f0:	11 82       	std	Z+1, r1	; 0x01
     5f2:	10 82       	st	Z, r1

	return EjeCmd(cmd,args);
     5f4:	c6 01       	movw	r24, r12
     5f6:	0e 94 4b 02 	call	0x496	; 0x496 <EjeCmd>
}
     5fa:	2c 96       	adiw	r28, 0x0c	; 12
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	cf 91       	pop	r28
     608:	df 91       	pop	r29
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	ef 90       	pop	r14
     612:	df 90       	pop	r13
     614:	cf 90       	pop	r12
     616:	08 95       	ret

00000618 <prompt>:
char comando[30];



void prompt(void)
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
	while (1)
	{
		printf("AVR>");
     61c:	c6 e4       	ldi	r28, 0x46	; 70
     61e:	d1 e0       	ldi	r29, 0x01	; 1
     620:	00 d0       	rcall	.+0      	; 0x622 <prompt+0xa>
     622:	ed b7       	in	r30, 0x3d	; 61
     624:	fe b7       	in	r31, 0x3e	; 62
     626:	d2 83       	std	Z+2, r29	; 0x02
     628:	c1 83       	std	Z+1, r28	; 0x01
     62a:	0e 94 4a 06 	call	0xc94	; 0xc94 <printf>
		gets(comando);
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 25 06 	call	0xc4a	; 0xc4a <gets>
		ProcesaTokens(comando);
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 bf 02 	call	0x57e	; 0x57e <ProcesaTokens>
     642:	ee cf       	rjmp	.-36     	; 0x620 <prompt+0x8>

00000644 <lcd_putchar>:
   hd44780_outcmd(HD44780_DISPCTL(1, 1, 0));
   hd44780_wait_ready(1000);
 }

 int lcd_putchar(char c, FILE *unused)
 {
     644:	1f 93       	push	r17
     646:	18 2f       	mov	r17, r24
   static bool second_nl_seen;
   static uint8_t line=0; //handle multi line displays


   if ((second_nl_seen) && (c != '\n')&&(line==0))
     648:	80 91 a5 01 	lds	r24, 0x01A5
     64c:	88 23       	and	r24, r24
     64e:	99 f0       	breq	.+38     	; 0x676 <lcd_putchar+0x32>
     650:	1a 30       	cpi	r17, 0x0A	; 10
     652:	99 f0       	breq	.+38     	; 0x67a <lcd_putchar+0x36>
     654:	80 91 a4 01 	lds	r24, 0x01A4
     658:	88 23       	and	r24, r24
     65a:	f9 f4       	brne	.+62     	; 0x69a <lcd_putchar+0x56>
   {
       /*
        * First character after newline was received,  clear display and home cursor.
        */
       hd44780_wait_ready(40);    //40 uS
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <hd44780_wait_ready>
       hd44780_outcmd(HD44780_CLR);
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	0e 94 27 01 	call	0x24e	; 0x24e <hd44780_outbyte>
       hd44780_wait_ready(1600);  //1600 uS
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <hd44780_wait_ready>
       //obviated the next four lines
       //hd44780_outcmd(HD44780_HOME);
       //hd44780_wait_ready(1600);
       //hd44780_outcmd(HD44780_DDADDR(0));
       //hd44780_wait_ready(1000);
       second_nl_seen=false;
     670:	10 92 a5 01 	sts	0x01A5, r1
     674:	12 c0       	rjmp	.+36     	; 0x69a <lcd_putchar+0x56>
   }
   if (c == '\n')
     676:	1a 30       	cpi	r17, 0x0A	; 10
     678:	81 f4       	brne	.+32     	; 0x69a <lcd_putchar+0x56>
   {
         if (line==0)
     67a:	80 91 a4 01 	lds	r24, 0x01A4
     67e:	88 23       	and	r24, r24
     680:	31 f4       	brne	.+12     	; 0x68e <lcd_putchar+0x4a>
    {
            line++;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 a4 01 	sts	0x01A4, r24
            hd44780_outcmd(HD44780_DDADDR(64));
     688:	80 ec       	ldi	r24, 0xC0	; 192
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	08 c0       	rjmp	.+16     	; 0x69e <lcd_putchar+0x5a>
             hd44780_wait_ready(1000);
    }
    else
    {
            second_nl_seen = true;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	80 93 a5 01 	sts	0x01A5, r24
         line=0;
     694:	10 92 a4 01 	sts	0x01A4, r1
     698:	07 c0       	rjmp	.+14     	; 0x6a8 <lcd_putchar+0x64>
    }
   }
   else
   {
           hd44780_outdata(c);
     69a:	81 2f       	mov	r24, r17
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	0e 94 27 01 	call	0x24e	; 0x24e <hd44780_outbyte>
      hd44780_wait_ready(40);
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <hd44780_wait_ready>
   }
   return 0;
 }
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	1f 91       	pop	r17
     6ae:	08 95       	ret

000006b0 <lcd_init>:
  * function, then adjust the display attributes we want.
  */
 void lcd_init(void)
 {

   hd44780_init();
     6b0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <hd44780_init>
   /*
    * Clear the display.
    */
   hd44780_outcmd(HD44780_CLR);
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	0e 94 27 01 	call	0x24e	; 0x24e <hd44780_outbyte>
   hd44780_wait_ready(1000);
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <hd44780_wait_ready>
   /*
    * Entry mode: auto-increment address counter, no display shift in
    * effect.
    */
   hd44780_outcmd(HD44780_ENTMODE(1, 0));
     6c2:	86 e0       	ldi	r24, 0x06	; 6
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	0e 94 27 01 	call	0x24e	; 0x24e <hd44780_outbyte>
   hd44780_wait_ready(1000);
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <hd44780_wait_ready>
   /*
    * Enable display, activate non-blinking cursor.
    */
   hd44780_outcmd(HD44780_DISPCTL(1, 1, 0));
     6d0:	8e e0       	ldi	r24, 0x0E	; 14
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 27 01 	call	0x24e	; 0x24e <hd44780_outbyte>
   hd44780_wait_ready(1000);
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <hd44780_wait_ready>
 }
     6de:	08 95       	ret

000006e0 <InitLeds>:
#include <avr/io.h>

void InitLeds(void)
{
//configuracion de los puertos
	DDRD = 0xFF; //Segundero
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	81 bb       	out	0x11, r24	; 17
	PORTD = ~0x00;
     6e4:	82 bb       	out	0x12, r24	; 18

	DDRC = 0xFF;//Comandos enc y apag
     6e6:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFF;
     6e8:	85 bb       	out	0x15, r24	; 21
}
     6ea:	08 95       	ret

000006ec <main>:
FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);
FILE lcd_str = FDEV_SETUP_STREAM(lcd_putchar, NULL, _FDEV_SETUP_WRITE);

int main()
{
	stdout = stdin = &uart_str;
     6ec:	8b e4       	ldi	r24, 0x4B	; 75
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	90 93 20 02 	sts	0x0220, r25
     6f4:	80 93 1f 02 	sts	0x021F, r24
     6f8:	90 93 22 02 	sts	0x0222, r25
     6fc:	80 93 21 02 	sts	0x0221, r24
	stderr = &lcd_str;
     700:	89 e5       	ldi	r24, 0x59	; 89
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	90 93 24 02 	sts	0x0224, r25
     708:	80 93 23 02 	sts	0x0223, r24
#include "leds.h"


static void ioinit(void)
{	//inicializacion de perifericos
	uart_init();
     70c:	0e 94 af 04 	call	0x95e	; 0x95e <uart_init>
	lcd_init();
     710:	0e 94 58 03 	call	0x6b0	; 0x6b0 <lcd_init>
	initReloj();
     714:	0e 94 a0 03 	call	0x740	; 0x740 <initReloj>
	InicializaCtrlMotor();
     718:	0e 94 95 03 	call	0x72a	; 0x72a <InicializaCtrlMotor>
	InitLeds();
     71c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <InitLeds>
	ioinit();
	
	//fprintf(stderr, "Hello world!\n");
	//fprintf(stderr, "Hello world!#2\n");

	prompt();
     720:	0e 94 0c 03 	call	0x618	; 0x618 <prompt>

	return 0;
}
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret

0000072a <InicializaCtrlMotor>:
 */
#include <avr/io.h>

void InicializaCtrlMotor(void)
{
	DDRE |= (1<<PE0); // conf pin 0 como salida
     72a:	10 9a       	sbi	0x02, 0	; 2
	PORTE &= ~(1<<PE0); // inicializamos con el control apagado
     72c:	18 98       	cbi	0x03, 0	; 3
}
     72e:	08 95       	ret

00000730 <GiraIzq>:

void GiraIzq(void)
{
	PORTE |= (1<<PE0);
     730:	18 9a       	sbi	0x03, 0	; 3
}
     732:	08 95       	ret

00000734 <GiraDer>:

void GiraDer(void)
{
	PORTE |= ~(1<<PE0);
     734:	83 b1       	in	r24, 0x03	; 3
     736:	8e 6f       	ori	r24, 0xFE	; 254
     738:	83 b9       	out	0x03, r24	; 3
}
     73a:	08 95       	ret

0000073c <ParaMotor>:

void ParaMotor(void)
{
	PORTE &= ~(1<<PE0);
     73c:	18 98       	cbi	0x03, 0	; 3
}
     73e:	08 95       	ret

00000740 <initReloj>:

volatile uint16_t cuenta; //tiene que ser de 16 bits porque quermos contar hasta 3600

void initReloj()
{
	TCCR0 = (1 << CS01); // reloj/8 = 1,382,400
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<TOIE0); //habilita interrupcion por overflow en timer
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 0x00; //ponemos el contador del timer a 0
     748:	12 be       	out	0x32, r1	; 50
	cuenta = 0; //el contador tambien a 0
     74a:	10 92 1e 02 	sts	0x021E, r1
     74e:	10 92 1d 02 	sts	0x021D, r1
	sei(); //habilitar interrupciones globales
     752:	78 94       	sei

}
     754:	08 95       	ret

00000756 <__vector_16>:
	printf("%02d, %02d ,%04d\n", DD,MM,AA);

}

ISR (TIMER0_OVF_vect)
{
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	0b b6       	in	r0, 0x3b	; 59
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	4f 93       	push	r20
     76a:	5f 93       	push	r21
     76c:	6f 93       	push	r22
     76e:	7f 93       	push	r23
     770:	8f 93       	push	r24
     772:	9f 93       	push	r25
     774:	af 93       	push	r26
     776:	bf 93       	push	r27
     778:	ef 93       	push	r30
     77a:	ff 93       	push	r31
	cuenta++; //cada vez que se desbrode el timer (256) aumentara en uno el contador
     77c:	80 91 1d 02 	lds	r24, 0x021D
     780:	90 91 1e 02 	lds	r25, 0x021E
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	90 93 1e 02 	sts	0x021E, r25
     78a:	80 93 1d 02 	sts	0x021D, r24
	PORTD = ~Segundos; //visualizar el segundero en el puerto D
     78e:	20 91 a6 01 	lds	r18, 0x01A6
     792:	82 2f       	mov	r24, r18
     794:	80 95       	com	r24
     796:	82 bb       	out	0x12, r24	; 18
		
	if (cuenta == 5400) //cuando haya llegado a 5400 el contador
     798:	80 91 1d 02 	lds	r24, 0x021D
     79c:	90 91 1e 02 	lds	r25, 0x021E
     7a0:	88 51       	subi	r24, 0x18	; 24
     7a2:	95 41       	sbci	r25, 0x15	; 21
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <__vector_16+0x52>
     7a6:	72 c0       	rjmp	.+228    	; 0x88c <__vector_16+0x136>
	{					// habra pasado un segundo exacto porque 5400*256= 1,382,400

		fprintf(stderr, "%02d:%02d:%02d\n\n", Horas, Minutos, Segundos);
     7a8:	8d b7       	in	r24, 0x3d	; 61
     7aa:	9e b7       	in	r25, 0x3e	; 62
     7ac:	0a 97       	sbiw	r24, 0x0a	; 10
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	9e bf       	out	0x3e, r25	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	8d bf       	out	0x3d, r24	; 61
     7b8:	ed b7       	in	r30, 0x3d	; 61
     7ba:	fe b7       	in	r31, 0x3e	; 62
     7bc:	31 96       	adiw	r30, 0x01	; 1
     7be:	80 91 23 02 	lds	r24, 0x0223
     7c2:	90 91 24 02 	lds	r25, 0x0224
     7c6:	ad b7       	in	r26, 0x3d	; 61
     7c8:	be b7       	in	r27, 0x3e	; 62
     7ca:	12 96       	adiw	r26, 0x02	; 2
     7cc:	9c 93       	st	X, r25
     7ce:	8e 93       	st	-X, r24
     7d0:	11 97       	sbiw	r26, 0x01	; 1
     7d2:	87 e6       	ldi	r24, 0x67	; 103
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	93 83       	std	Z+3, r25	; 0x03
     7d8:	82 83       	std	Z+2, r24	; 0x02
     7da:	80 91 a8 01 	lds	r24, 0x01A8
     7de:	84 83       	std	Z+4, r24	; 0x04
     7e0:	15 82       	std	Z+5, r1	; 0x05
     7e2:	80 91 a7 01 	lds	r24, 0x01A7
     7e6:	86 83       	std	Z+6, r24	; 0x06
     7e8:	17 82       	std	Z+7, r1	; 0x07
     7ea:	20 87       	std	Z+8, r18	; 0x08
     7ec:	11 86       	std	Z+9, r1	; 0x09
     7ee:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <fprintf>
		cuenta = 0;		//reiniciamos el contador
     7f2:	10 92 1e 02 	sts	0x021E, r1
     7f6:	10 92 1d 02 	sts	0x021D, r1
		Segundos++;		//aumentamos un segundo
     7fa:	80 91 a6 01 	lds	r24, 0x01A6
     7fe:	8f 5f       	subi	r24, 0xFF	; 255
     800:	80 93 a6 01 	sts	0x01A6, r24


		if (Segundos == 59) {
     804:	2d b7       	in	r18, 0x3d	; 61
     806:	3e b7       	in	r19, 0x3e	; 62
     808:	26 5f       	subi	r18, 0xF6	; 246
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	3e bf       	out	0x3e, r19	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	2d bf       	out	0x3d, r18	; 61
     816:	8b 33       	cpi	r24, 0x3B	; 59
     818:	39 f4       	brne	.+14     	; 0x828 <__vector_16+0xd2>
			Segundos = 0;
     81a:	10 92 a6 01 	sts	0x01A6, r1
			Minutos++;
     81e:	80 91 a7 01 	lds	r24, 0x01A7
     822:	8f 5f       	subi	r24, 0xFF	; 255
     824:	80 93 a7 01 	sts	0x01A7, r24

		}

		if (Minutos == 59) {
     828:	80 91 a7 01 	lds	r24, 0x01A7
     82c:	8b 33       	cpi	r24, 0x3B	; 59
     82e:	39 f4       	brne	.+14     	; 0x83e <__vector_16+0xe8>
			Minutos = 0;
     830:	10 92 a7 01 	sts	0x01A7, r1
			Horas++;
     834:	80 91 a8 01 	lds	r24, 0x01A8
     838:	8f 5f       	subi	r24, 0xFF	; 255
     83a:	80 93 a8 01 	sts	0x01A8, r24
		}

		if (Horas == 24) {
     83e:	80 91 a8 01 	lds	r24, 0x01A8
     842:	88 31       	cpi	r24, 0x18	; 24
     844:	39 f4       	brne	.+14     	; 0x854 <__vector_16+0xfe>
			Horas = 0;
     846:	10 92 a8 01 	sts	0x01A8, r1
			DD++;
     84a:	80 91 9a 01 	lds	r24, 0x019A
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	80 93 9a 01 	sts	0x019A, r24
		}

		if (DD == 30) {
     854:	80 91 9a 01 	lds	r24, 0x019A
     858:	8e 31       	cpi	r24, 0x1E	; 30
     85a:	41 f4       	brne	.+16     	; 0x86c <__vector_16+0x116>
			DD = 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	80 93 9a 01 	sts	0x019A, r24
			MM++;
     862:	80 91 9b 01 	lds	r24, 0x019B
     866:	8f 5f       	subi	r24, 0xFF	; 255
     868:	80 93 9b 01 	sts	0x019B, r24
		}

		if (MM == 12) {
     86c:	80 91 9b 01 	lds	r24, 0x019B
     870:	8c 30       	cpi	r24, 0x0C	; 12
     872:	61 f4       	brne	.+24     	; 0x88c <__vector_16+0x136>
			MM = 1;
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	80 93 9b 01 	sts	0x019B, r24
			AA++;
     87a:	80 91 a9 01 	lds	r24, 0x01A9
     87e:	90 91 aa 01 	lds	r25, 0x01AA
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	90 93 aa 01 	sts	0x01AA, r25
     888:	80 93 a9 01 	sts	0x01A9, r24
		}
	}
}
     88c:	ff 91       	pop	r31
     88e:	ef 91       	pop	r30
     890:	bf 91       	pop	r27
     892:	af 91       	pop	r26
     894:	9f 91       	pop	r25
     896:	8f 91       	pop	r24
     898:	7f 91       	pop	r23
     89a:	6f 91       	pop	r22
     89c:	5f 91       	pop	r21
     89e:	4f 91       	pop	r20
     8a0:	3f 91       	pop	r19
     8a2:	2f 91       	pop	r18
     8a4:	0f 90       	pop	r0
     8a6:	0b be       	out	0x3b, r0	; 59
     8a8:	0f 90       	pop	r0
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	0f 90       	pop	r0
     8ae:	1f 90       	pop	r1
     8b0:	18 95       	reti

000008b2 <MuestraFecha>:
	printf("%02d:%02d:%02d\n", Horas, Minutos, Segundos);
}

void MuestraFecha()
{
	printf("%02d, %02d ,%04d\n", DD,MM,AA);
     8b2:	8d b7       	in	r24, 0x3d	; 61
     8b4:	9e b7       	in	r25, 0x3e	; 62
     8b6:	08 97       	sbiw	r24, 0x08	; 8
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	9e bf       	out	0x3e, r25	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	8d bf       	out	0x3d, r24	; 61
     8c2:	ed b7       	in	r30, 0x3d	; 61
     8c4:	fe b7       	in	r31, 0x3e	; 62
     8c6:	31 96       	adiw	r30, 0x01	; 1
     8c8:	88 e7       	ldi	r24, 0x78	; 120
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	ad b7       	in	r26, 0x3d	; 61
     8ce:	be b7       	in	r27, 0x3e	; 62
     8d0:	12 96       	adiw	r26, 0x02	; 2
     8d2:	9c 93       	st	X, r25
     8d4:	8e 93       	st	-X, r24
     8d6:	11 97       	sbiw	r26, 0x01	; 1
     8d8:	80 91 9a 01 	lds	r24, 0x019A
     8dc:	82 83       	std	Z+2, r24	; 0x02
     8de:	13 82       	std	Z+3, r1	; 0x03
     8e0:	80 91 9b 01 	lds	r24, 0x019B
     8e4:	84 83       	std	Z+4, r24	; 0x04
     8e6:	15 82       	std	Z+5, r1	; 0x05
     8e8:	80 91 a9 01 	lds	r24, 0x01A9
     8ec:	90 91 aa 01 	lds	r25, 0x01AA
     8f0:	97 83       	std	Z+7, r25	; 0x07
     8f2:	86 83       	std	Z+6, r24	; 0x06
     8f4:	0e 94 4a 06 	call	0xc94	; 0xc94 <printf>
     8f8:	8d b7       	in	r24, 0x3d	; 61
     8fa:	9e b7       	in	r25, 0x3e	; 62
     8fc:	08 96       	adiw	r24, 0x08	; 8
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	9e bf       	out	0x3e, r25	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	8d bf       	out	0x3d, r24	; 61

}
     908:	08 95       	ret

0000090a <MuestraHora>:

}

void MuestraHora()
{
	printf("%02d:%02d:%02d\n", Horas, Minutos, Segundos);
     90a:	8d b7       	in	r24, 0x3d	; 61
     90c:	9e b7       	in	r25, 0x3e	; 62
     90e:	08 97       	sbiw	r24, 0x08	; 8
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	9e bf       	out	0x3e, r25	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	8d bf       	out	0x3d, r24	; 61
     91a:	ed b7       	in	r30, 0x3d	; 61
     91c:	fe b7       	in	r31, 0x3e	; 62
     91e:	31 96       	adiw	r30, 0x01	; 1
     920:	8a e8       	ldi	r24, 0x8A	; 138
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	ad b7       	in	r26, 0x3d	; 61
     926:	be b7       	in	r27, 0x3e	; 62
     928:	12 96       	adiw	r26, 0x02	; 2
     92a:	9c 93       	st	X, r25
     92c:	8e 93       	st	-X, r24
     92e:	11 97       	sbiw	r26, 0x01	; 1
     930:	80 91 a8 01 	lds	r24, 0x01A8
     934:	82 83       	std	Z+2, r24	; 0x02
     936:	13 82       	std	Z+3, r1	; 0x03
     938:	80 91 a7 01 	lds	r24, 0x01A7
     93c:	84 83       	std	Z+4, r24	; 0x04
     93e:	15 82       	std	Z+5, r1	; 0x05
     940:	80 91 a6 01 	lds	r24, 0x01A6
     944:	86 83       	std	Z+6, r24	; 0x06
     946:	17 82       	std	Z+7, r1	; 0x07
     948:	0e 94 4a 06 	call	0xc94	; 0xc94 <printf>
     94c:	8d b7       	in	r24, 0x3d	; 61
     94e:	9e b7       	in	r25, 0x3e	; 62
     950:	08 96       	adiw	r24, 0x08	; 8
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	f8 94       	cli
     956:	9e bf       	out	0x3e, r25	; 62
     958:	0f be       	out	0x3f, r0	; 63
     95a:	8d bf       	out	0x3d, r24	; 61
}
     95c:	08 95       	ret

0000095e <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
	UCSRA = _BV(U2X); /* improve baud rate error by using 2x clk */
	UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
	UBRRL = (F_CPU / (16UL * UART_BAUD)) - 1;
     95e:	87 e4       	ldi	r24, 0x47	; 71
     960:	89 b9       	out	0x09, r24	; 9
#endif
	UCSRB = _BV(TXEN) | _BV(RXEN); /* tx/rx enable */
     962:	88 e1       	ldi	r24, 0x18	; 24
     964:	8a b9       	out	0x0a, r24	; 10
}
     966:	08 95       	ret

00000968 <uart_putchar>:

/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream) {
     968:	1f 93       	push	r17
     96a:	18 2f       	mov	r17, r24

	if (c == '\a') {
     96c:	87 30       	cpi	r24, 0x07	; 7
     96e:	49 f4       	brne	.+18     	; 0x982 <uart_putchar+0x1a>
		fputs("*ring*\n", stderr);
     970:	60 91 23 02 	lds	r22, 0x0223
     974:	70 91 24 02 	lds	r23, 0x0224
     978:	8c e9       	ldi	r24, 0x9C	; 156
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <fputs>
     980:	08 c0       	rjmp	.+16     	; 0x992 <uart_putchar+0x2a>
		return 0;
	}

	if (c == '\n')
     982:	8a 30       	cpi	r24, 0x0A	; 10
     984:	19 f4       	brne	.+6      	; 0x98c <uart_putchar+0x24>
		uart_putchar('\r', stream);
     986:	8d e0       	ldi	r24, 0x0D	; 13
     988:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
	loop_until_bit_is_set(UCSRA, UDRE);
     98c:	5d 9b       	sbis	0x0b, 5	; 11
     98e:	fe cf       	rjmp	.-4      	; 0x98c <uart_putchar+0x24>
	UDR = c;
     990:	1c b9       	out	0x0c, r17	; 12

	return 0;
}
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	1f 91       	pop	r17
     998:	08 95       	ret

0000099a <uart_getchar>:
 * parity recognition is supported by hardware).
 *
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int uart_getchar(FILE *stream) {
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	7c 01       	movw	r14, r24
	uint8_t c;
	char *cp, *cp2;
	static char b[RX_BUFSIZE];
	static char *rxp;

	if (rxp == 0)
     9a8:	80 91 ab 01 	lds	r24, 0x01AB
     9ac:	90 91 ac 01 	lds	r25, 0x01AC
     9b0:	89 2b       	or	r24, r25
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <uart_getchar+0x1c>
     9b4:	97 c0       	rjmp	.+302    	; 0xae4 <uart_getchar+0x14a>
     9b6:	0d ea       	ldi	r16, 0xAD	; 173
     9b8:	11 e0       	ldi	r17, 0x01	; 1
		for (cp = b;;) {
			loop_until_bit_is_set(UCSRA, RXC);
     9ba:	5f 9b       	sbis	0x0b, 7	; 11
     9bc:	fe cf       	rjmp	.-4      	; 0x9ba <uart_getchar+0x20>
			if (UCSRA & _BV(FE))
     9be:	5c 9b       	sbis	0x0b, 4	; 11
     9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <uart_getchar+0x2e>
     9c2:	2e ef       	ldi	r18, 0xFE	; 254
     9c4:	3f ef       	ldi	r19, 0xFF	; 255
     9c6:	a2 c0       	rjmp	.+324    	; 0xb0c <uart_getchar+0x172>
				return _FDEV_EOF;
			if (UCSRA & _BV(DOR))
     9c8:	5b 99       	sbic	0x0b, 3	; 11
     9ca:	9e c0       	rjmp	.+316    	; 0xb08 <uart_getchar+0x16e>
				return _FDEV_ERR;
			c = UDR;
     9cc:	9c b1       	in	r25, 0x0c	; 12
			/* behaviour similar to Unix stty ICRNL */
			if (c == '\r')
     9ce:	9d 30       	cpi	r25, 0x0D	; 13
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <uart_getchar+0x3c>
				c = '\n';
			if (c == '\n') {
     9d2:	9a 30       	cpi	r25, 0x0A	; 10
     9d4:	69 f4       	brne	.+26     	; 0x9f0 <uart_getchar+0x56>
				*cp = c;
     9d6:	8a e0       	ldi	r24, 0x0A	; 10
     9d8:	f8 01       	movw	r30, r16
     9da:	80 83       	st	Z, r24
				uart_putchar(c, stream);
     9dc:	b7 01       	movw	r22, r14
     9de:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
				rxp = b;
     9e2:	8d ea       	ldi	r24, 0xAD	; 173
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	90 93 ac 01 	sts	0x01AC, r25
     9ea:	80 93 ab 01 	sts	0x01AB, r24
     9ee:	7a c0       	rjmp	.+244    	; 0xae4 <uart_getchar+0x14a>
				break;
			} else if (c == '\t')
     9f0:	99 30       	cpi	r25, 0x09	; 9
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <uart_getchar+0x5c>
     9f4:	90 e2       	ldi	r25, 0x20	; 32
				c = ' ';

			if ((c >= (uint8_t) ' ' && c <= (uint8_t) '\x7e') || c
     9f6:	89 2f       	mov	r24, r25
     9f8:	80 52       	subi	r24, 0x20	; 32
     9fa:	8f 35       	cpi	r24, 0x5F	; 95
     9fc:	10 f0       	brcs	.+4      	; 0xa02 <uart_getchar+0x68>
     9fe:	90 3a       	cpi	r25, 0xA0	; 160
     a00:	70 f0       	brcs	.+28     	; 0xa1e <uart_getchar+0x84>
					>= (uint8_t) '\xa0') {
				if (cp == b + RX_BUFSIZE - 1)
     a02:	f1 e0       	ldi	r31, 0x01	; 1
     a04:	0c 3f       	cpi	r16, 0xFC	; 252
     a06:	1f 07       	cpc	r17, r31
     a08:	11 f4       	brne	.+4      	; 0xa0e <uart_getchar+0x74>
					uart_putchar('\a', stream);
     a0a:	87 e0       	ldi	r24, 0x07	; 7
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <uart_getchar+0x7c>
				else {
					*cp++ = c;
     a0e:	f8 01       	movw	r30, r16
     a10:	91 93       	st	Z+, r25
     a12:	8f 01       	movw	r16, r30
					uart_putchar(c, stream);
     a14:	89 2f       	mov	r24, r25
     a16:	b7 01       	movw	r22, r14
     a18:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
     a1c:	ce cf       	rjmp	.-100    	; 0x9ba <uart_getchar+0x20>
				}
				continue;
			}

			switch (c) {
     a1e:	92 31       	cpi	r25, 0x12	; 18
     a20:	31 f1       	breq	.+76     	; 0xa6e <uart_getchar+0xd4>
     a22:	93 31       	cpi	r25, 0x13	; 19
     a24:	30 f4       	brcc	.+12     	; 0xa32 <uart_getchar+0x98>
     a26:	93 30       	cpi	r25, 0x03	; 3
     a28:	09 f4       	brne	.+2      	; 0xa2c <uart_getchar+0x92>
     a2a:	6e c0       	rjmp	.+220    	; 0xb08 <uart_getchar+0x16e>
     a2c:	98 30       	cpi	r25, 0x08	; 8
     a2e:	29 f6       	brne	.-118    	; 0x9ba <uart_getchar+0x20>
     a30:	09 c0       	rjmp	.+18     	; 0xa44 <uart_getchar+0xaa>
     a32:	97 31       	cpi	r25, 0x17	; 23
     a34:	09 f4       	brne	.+2      	; 0xa38 <uart_getchar+0x9e>
     a36:	4b c0       	rjmp	.+150    	; 0xace <uart_getchar+0x134>
     a38:	9f 37       	cpi	r25, 0x7F	; 127
     a3a:	21 f0       	breq	.+8      	; 0xa44 <uart_getchar+0xaa>
     a3c:	95 31       	cpi	r25, 0x15	; 21
     a3e:	09 f0       	breq	.+2      	; 0xa42 <uart_getchar+0xa8>
     a40:	bc cf       	rjmp	.-136    	; 0x9ba <uart_getchar+0x20>
     a42:	32 c0       	rjmp	.+100    	; 0xaa8 <uart_getchar+0x10e>
			case 'c' & 0x1f:
				return -1;

			case '\b':
			case '\x7f':
				if (cp > b) {
     a44:	f1 e0       	ldi	r31, 0x01	; 1
     a46:	0d 3a       	cpi	r16, 0xAD	; 173
     a48:	1f 07       	cpc	r17, r31
     a4a:	09 f0       	breq	.+2      	; 0xa4e <uart_getchar+0xb4>
     a4c:	08 f4       	brcc	.+2      	; 0xa50 <uart_getchar+0xb6>
     a4e:	b5 cf       	rjmp	.-150    	; 0x9ba <uart_getchar+0x20>
					uart_putchar('\b', stream);
     a50:	88 e0       	ldi	r24, 0x08	; 8
     a52:	b7 01       	movw	r22, r14
     a54:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
					uart_putchar(' ', stream);
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
					uart_putchar('\b', stream);
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	b7 01       	movw	r22, r14
     a64:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
					cp--;
     a68:	01 50       	subi	r16, 0x01	; 1
     a6a:	10 40       	sbci	r17, 0x00	; 0
     a6c:	a6 cf       	rjmp	.-180    	; 0x9ba <uart_getchar+0x20>
				}
				break;

			case 'r' & 0x1f:
				uart_putchar('\r', stream);
     a6e:	8d e0       	ldi	r24, 0x0D	; 13
     a70:	b7 01       	movw	r22, r14
     a72:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
     a76:	cd ea       	ldi	r28, 0xAD	; 173
     a78:	d1 e0       	ldi	r29, 0x01	; 1
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <uart_getchar+0xea>
				for (cp2 = b; cp2 < cp; cp2++)
					uart_putchar(*cp2, stream);
     a7c:	89 91       	ld	r24, Y+
     a7e:	b7 01       	movw	r22, r14
     a80:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
				}
				break;

			case 'r' & 0x1f:
				uart_putchar('\r', stream);
				for (cp2 = b; cp2 < cp; cp2++)
     a84:	c0 17       	cp	r28, r16
     a86:	d1 07       	cpc	r29, r17
     a88:	c8 f3       	brcs	.-14     	; 0xa7c <uart_getchar+0xe2>
     a8a:	97 cf       	rjmp	.-210    	; 0x9ba <uart_getchar+0x20>
					uart_putchar(*cp2, stream);
				break;

			case 'u' & 0x1f:
				while (cp > b) {
					uart_putchar('\b', stream);
     a8c:	88 e0       	ldi	r24, 0x08	; 8
     a8e:	b7 01       	movw	r22, r14
     a90:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
					uart_putchar(' ', stream);
     a94:	80 e2       	ldi	r24, 0x20	; 32
     a96:	b7 01       	movw	r22, r14
     a98:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
					uart_putchar('\b', stream);
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	b7 01       	movw	r22, r14
     aa0:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
					cp--;
     aa4:	01 50       	subi	r16, 0x01	; 1
     aa6:	10 40       	sbci	r17, 0x00	; 0
				for (cp2 = b; cp2 < cp; cp2++)
					uart_putchar(*cp2, stream);
				break;

			case 'u' & 0x1f:
				while (cp > b) {
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	0d 3a       	cpi	r16, 0xAD	; 173
     aac:	18 07       	cpc	r17, r24
     aae:	09 f0       	breq	.+2      	; 0xab2 <uart_getchar+0x118>
     ab0:	68 f7       	brcc	.-38     	; 0xa8c <uart_getchar+0xf2>
     ab2:	83 cf       	rjmp	.-250    	; 0x9ba <uart_getchar+0x20>
				}
				break;

			case 'w' & 0x1f:
				while (cp > b && cp[-1] != ' ') {
					uart_putchar('\b', stream);
     ab4:	88 e0       	ldi	r24, 0x08	; 8
     ab6:	b7 01       	movw	r22, r14
     ab8:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
					uart_putchar(' ', stream);
     abc:	80 e2       	ldi	r24, 0x20	; 32
     abe:	b7 01       	movw	r22, r14
     ac0:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
					uart_putchar('\b', stream);
     ac4:	88 e0       	ldi	r24, 0x08	; 8
     ac6:	b7 01       	movw	r22, r14
     ac8:	0e 94 b4 04 	call	0x968	; 0x968 <uart_putchar>
     acc:	8e 01       	movw	r16, r28
					cp--;
				}
				break;

			case 'w' & 0x1f:
				while (cp > b && cp[-1] != ' ') {
     ace:	e1 e0       	ldi	r30, 0x01	; 1
     ad0:	0d 3a       	cpi	r16, 0xAD	; 173
     ad2:	1e 07       	cpc	r17, r30
     ad4:	09 f0       	breq	.+2      	; 0xad8 <uart_getchar+0x13e>
     ad6:	08 f4       	brcc	.+2      	; 0xada <uart_getchar+0x140>
     ad8:	70 cf       	rjmp	.-288    	; 0x9ba <uart_getchar+0x20>
     ada:	e8 01       	movw	r28, r16
     adc:	8a 91       	ld	r24, -Y
     ade:	80 32       	cpi	r24, 0x20	; 32
     ae0:	49 f7       	brne	.-46     	; 0xab4 <uart_getchar+0x11a>
     ae2:	6b cf       	rjmp	.-298    	; 0x9ba <uart_getchar+0x20>
				}
				break;
			}
		}

	c = *rxp++;
     ae4:	e0 91 ab 01 	lds	r30, 0x01AB
     ae8:	f0 91 ac 01 	lds	r31, 0x01AC
     aec:	81 91       	ld	r24, Z+
     aee:	f0 93 ac 01 	sts	0x01AC, r31
     af2:	e0 93 ab 01 	sts	0x01AB, r30
	if (c == '\n')
     af6:	8a 30       	cpi	r24, 0x0A	; 10
     af8:	21 f4       	brne	.+8      	; 0xb02 <uart_getchar+0x168>
		rxp = 0;
     afa:	10 92 ac 01 	sts	0x01AC, r1
     afe:	10 92 ab 01 	sts	0x01AB, r1

	return c;
     b02:	28 2f       	mov	r18, r24
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <uart_getchar+0x172>
     b08:	2f ef       	ldi	r18, 0xFF	; 255
     b0a:	3f ef       	ldi	r19, 0xFF	; 255
}
     b0c:	c9 01       	movw	r24, r18
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	08 95       	ret

00000b1c <atoi>:
     b1c:	fc 01       	movw	r30, r24
     b1e:	88 27       	eor	r24, r24
     b20:	99 27       	eor	r25, r25
     b22:	e8 94       	clt
     b24:	21 91       	ld	r18, Z+
     b26:	20 32       	cpi	r18, 0x20	; 32
     b28:	e9 f3       	breq	.-6      	; 0xb24 <atoi+0x8>
     b2a:	29 30       	cpi	r18, 0x09	; 9
     b2c:	10 f0       	brcs	.+4      	; 0xb32 <atoi+0x16>
     b2e:	2e 30       	cpi	r18, 0x0E	; 14
     b30:	c8 f3       	brcs	.-14     	; 0xb24 <atoi+0x8>
     b32:	2b 32       	cpi	r18, 0x2B	; 43
     b34:	41 f0       	breq	.+16     	; 0xb46 <atoi+0x2a>
     b36:	2d 32       	cpi	r18, 0x2D	; 45
     b38:	39 f4       	brne	.+14     	; 0xb48 <atoi+0x2c>
     b3a:	68 94       	set
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <atoi+0x2a>
     b3e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__mulhi_const_10>
     b42:	82 0f       	add	r24, r18
     b44:	91 1d       	adc	r25, r1
     b46:	21 91       	ld	r18, Z+
     b48:	20 53       	subi	r18, 0x30	; 48
     b4a:	2a 30       	cpi	r18, 0x0A	; 10
     b4c:	c0 f3       	brcs	.-16     	; 0xb3e <atoi+0x22>
     b4e:	1e f4       	brtc	.+6      	; 0xb56 <atoi+0x3a>
     b50:	90 95       	com	r25
     b52:	81 95       	neg	r24
     b54:	9f 4f       	sbci	r25, 0xFF	; 255
     b56:	08 95       	ret

00000b58 <strtok>:
     b58:	4d ef       	ldi	r20, 0xFD	; 253
     b5a:	51 e0       	ldi	r21, 0x01	; 1
     b5c:	0e 94 ba 05 	call	0xb74	; 0xb74 <strtok_r>
     b60:	08 95       	ret

00000b62 <strcmp>:
     b62:	fb 01       	movw	r30, r22
     b64:	dc 01       	movw	r26, r24
     b66:	8d 91       	ld	r24, X+
     b68:	01 90       	ld	r0, Z+
     b6a:	80 19       	sub	r24, r0
     b6c:	01 10       	cpse	r0, r1
     b6e:	d9 f3       	breq	.-10     	; 0xb66 <strcmp+0x4>
     b70:	99 0b       	sbc	r25, r25
     b72:	08 95       	ret

00000b74 <strtok_r>:
     b74:	fa 01       	movw	r30, r20
     b76:	a1 91       	ld	r26, Z+
     b78:	b0 81       	ld	r27, Z
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	19 f4       	brne	.+6      	; 0xb84 <strtok_r+0x10>
     b7e:	10 97       	sbiw	r26, 0x00	; 0
     b80:	e1 f0       	breq	.+56     	; 0xbba <strtok_r+0x46>
     b82:	cd 01       	movw	r24, r26
     b84:	dc 01       	movw	r26, r24
     b86:	cd 01       	movw	r24, r26
     b88:	0d 90       	ld	r0, X+
     b8a:	00 20       	and	r0, r0
     b8c:	11 f4       	brne	.+4      	; 0xb92 <strtok_r+0x1e>
     b8e:	c0 01       	movw	r24, r0
     b90:	13 c0       	rjmp	.+38     	; 0xbb8 <strtok_r+0x44>
     b92:	fb 01       	movw	r30, r22
     b94:	21 91       	ld	r18, Z+
     b96:	22 23       	and	r18, r18
     b98:	19 f0       	breq	.+6      	; 0xba0 <strtok_r+0x2c>
     b9a:	20 15       	cp	r18, r0
     b9c:	d9 f7       	brne	.-10     	; 0xb94 <strtok_r+0x20>
     b9e:	f3 cf       	rjmp	.-26     	; 0xb86 <strtok_r+0x12>
     ba0:	fb 01       	movw	r30, r22
     ba2:	21 91       	ld	r18, Z+
     ba4:	20 15       	cp	r18, r0
     ba6:	19 f4       	brne	.+6      	; 0xbae <strtok_r+0x3a>
     ba8:	1e 92       	st	-X, r1
     baa:	11 96       	adiw	r26, 0x01	; 1
     bac:	06 c0       	rjmp	.+12     	; 0xbba <strtok_r+0x46>
     bae:	22 23       	and	r18, r18
     bb0:	c1 f7       	brne	.-16     	; 0xba2 <strtok_r+0x2e>
     bb2:	0d 90       	ld	r0, X+
     bb4:	00 20       	and	r0, r0
     bb6:	a1 f7       	brne	.-24     	; 0xba0 <strtok_r+0x2c>
     bb8:	d0 01       	movw	r26, r0
     bba:	fa 01       	movw	r30, r20
     bbc:	a1 93       	st	Z+, r26
     bbe:	b0 83       	st	Z, r27
     bc0:	08 95       	ret

00000bc2 <__mulhi_const_10>:
     bc2:	7a e0       	ldi	r23, 0x0A	; 10
     bc4:	97 9f       	mul	r25, r23
     bc6:	90 2d       	mov	r25, r0
     bc8:	87 9f       	mul	r24, r23
     bca:	80 2d       	mov	r24, r0
     bcc:	91 0d       	add	r25, r1
     bce:	11 24       	eor	r1, r1
     bd0:	08 95       	ret

00000bd2 <fprintf>:
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	9e 01       	movw	r18, r28
     bdc:	27 5f       	subi	r18, 0xF7	; 247
     bde:	3f 4f       	sbci	r19, 0xFF	; 255
     be0:	8d 81       	ldd	r24, Y+5	; 0x05
     be2:	9e 81       	ldd	r25, Y+6	; 0x06
     be4:	6f 81       	ldd	r22, Y+7	; 0x07
     be6:	78 85       	ldd	r23, Y+8	; 0x08
     be8:	a9 01       	movw	r20, r18
     bea:	0e 94 b4 06 	call	0xd68	; 0xd68 <vfprintf>
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <fputs>:
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	7c 01       	movw	r14, r24
     c02:	8b 01       	movw	r16, r22
     c04:	db 01       	movw	r26, r22
     c06:	13 96       	adiw	r26, 0x03	; 3
     c08:	8c 91       	ld	r24, X
     c0a:	81 fd       	sbrc	r24, 1
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <fputs+0x20>
     c0e:	cf ef       	ldi	r28, 0xFF	; 255
     c10:	df ef       	ldi	r29, 0xFF	; 255
     c12:	13 c0       	rjmp	.+38     	; 0xc3a <fputs+0x46>
     c14:	c0 e0       	ldi	r28, 0x00	; 0
     c16:	d0 e0       	ldi	r29, 0x00	; 0
     c18:	0b c0       	rjmp	.+22     	; 0xc30 <fputs+0x3c>
     c1a:	d8 01       	movw	r26, r16
     c1c:	18 96       	adiw	r26, 0x08	; 8
     c1e:	ed 91       	ld	r30, X+
     c20:	fc 91       	ld	r31, X
     c22:	19 97       	sbiw	r26, 0x09	; 9
     c24:	b8 01       	movw	r22, r16
     c26:	09 95       	icall
     c28:	89 2b       	or	r24, r25
     c2a:	11 f0       	breq	.+4      	; 0xc30 <fputs+0x3c>
     c2c:	cf ef       	ldi	r28, 0xFF	; 255
     c2e:	df ef       	ldi	r29, 0xFF	; 255
     c30:	f7 01       	movw	r30, r14
     c32:	81 91       	ld	r24, Z+
     c34:	7f 01       	movw	r14, r30
     c36:	88 23       	and	r24, r24
     c38:	81 f7       	brne	.-32     	; 0xc1a <fputs+0x26>
     c3a:	ce 01       	movw	r24, r28
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	08 95       	ret

00000c4a <gets>:
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	8c 01       	movw	r16, r24
     c54:	e0 91 1f 02 	lds	r30, 0x021F
     c58:	f0 91 20 02 	lds	r31, 0x0220
     c5c:	83 81       	ldd	r24, Z+3	; 0x03
     c5e:	80 ff       	sbrs	r24, 0
     c60:	11 c0       	rjmp	.+34     	; 0xc84 <gets+0x3a>
     c62:	e8 01       	movw	r28, r16
     c64:	80 91 1f 02 	lds	r24, 0x021F
     c68:	90 91 20 02 	lds	r25, 0x0220
     c6c:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <fgetc>
     c70:	2f ef       	ldi	r18, 0xFF	; 255
     c72:	8f 3f       	cpi	r24, 0xFF	; 255
     c74:	92 07       	cpc	r25, r18
     c76:	31 f0       	breq	.+12     	; 0xc84 <gets+0x3a>
     c78:	89 93       	st	Y+, r24
     c7a:	0a 97       	sbiw	r24, 0x0a	; 10
     c7c:	99 f7       	brne	.-26     	; 0xc64 <gets+0x1a>
     c7e:	21 97       	sbiw	r28, 0x01	; 1
     c80:	18 82       	st	Y, r1
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <gets+0x3e>
     c84:	00 e0       	ldi	r16, 0x00	; 0
     c86:	10 e0       	ldi	r17, 0x00	; 0
     c88:	c8 01       	movw	r24, r16
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	08 95       	ret

00000c94 <printf>:
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	fe 01       	movw	r30, r28
     c9e:	35 96       	adiw	r30, 0x05	; 5
     ca0:	61 91       	ld	r22, Z+
     ca2:	71 91       	ld	r23, Z+
     ca4:	80 91 21 02 	lds	r24, 0x0221
     ca8:	90 91 22 02 	lds	r25, 0x0222
     cac:	af 01       	movw	r20, r30
     cae:	0e 94 b4 06 	call	0xd68	; 0xd68 <vfprintf>
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <printf_P>:
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	fe 01       	movw	r30, r28
     cc2:	35 96       	adiw	r30, 0x05	; 5
     cc4:	61 91       	ld	r22, Z+
     cc6:	71 91       	ld	r23, Z+
     cc8:	a0 91 21 02 	lds	r26, 0x0221
     ccc:	b0 91 22 02 	lds	r27, 0x0222
     cd0:	13 96       	adiw	r26, 0x03	; 3
     cd2:	8c 91       	ld	r24, X
     cd4:	13 97       	sbiw	r26, 0x03	; 3
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	13 96       	adiw	r26, 0x03	; 3
     cda:	8c 93       	st	X, r24
     cdc:	80 91 21 02 	lds	r24, 0x0221
     ce0:	90 91 22 02 	lds	r25, 0x0222
     ce4:	af 01       	movw	r20, r30
     ce6:	0e 94 b4 06 	call	0xd68	; 0xd68 <vfprintf>
     cea:	e0 91 21 02 	lds	r30, 0x0221
     cee:	f0 91 22 02 	lds	r31, 0x0222
     cf2:	23 81       	ldd	r18, Z+3	; 0x03
     cf4:	27 7f       	andi	r18, 0xF7	; 247
     cf6:	23 83       	std	Z+3, r18	; 0x03
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <puts>:
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	8c 01       	movw	r16, r24
     d08:	e0 91 21 02 	lds	r30, 0x0221
     d0c:	f0 91 22 02 	lds	r31, 0x0222
     d10:	83 81       	ldd	r24, Z+3	; 0x03
     d12:	81 ff       	sbrs	r24, 1
     d14:	21 c0       	rjmp	.+66     	; 0xd58 <puts+0x5a>
     d16:	c0 e0       	ldi	r28, 0x00	; 0
     d18:	d0 e0       	ldi	r29, 0x00	; 0
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <puts+0x38>
     d1c:	e0 91 21 02 	lds	r30, 0x0221
     d20:	f0 91 22 02 	lds	r31, 0x0222
     d24:	20 85       	ldd	r18, Z+8	; 0x08
     d26:	31 85       	ldd	r19, Z+9	; 0x09
     d28:	bf 01       	movw	r22, r30
     d2a:	f9 01       	movw	r30, r18
     d2c:	09 95       	icall
     d2e:	89 2b       	or	r24, r25
     d30:	11 f0       	breq	.+4      	; 0xd36 <puts+0x38>
     d32:	cf ef       	ldi	r28, 0xFF	; 255
     d34:	df ef       	ldi	r29, 0xFF	; 255
     d36:	f8 01       	movw	r30, r16
     d38:	81 91       	ld	r24, Z+
     d3a:	8f 01       	movw	r16, r30
     d3c:	88 23       	and	r24, r24
     d3e:	71 f7       	brne	.-36     	; 0xd1c <puts+0x1e>
     d40:	e0 91 21 02 	lds	r30, 0x0221
     d44:	f0 91 22 02 	lds	r31, 0x0222
     d48:	20 85       	ldd	r18, Z+8	; 0x08
     d4a:	31 85       	ldd	r19, Z+9	; 0x09
     d4c:	8a e0       	ldi	r24, 0x0A	; 10
     d4e:	bf 01       	movw	r22, r30
     d50:	f9 01       	movw	r30, r18
     d52:	09 95       	icall
     d54:	89 2b       	or	r24, r25
     d56:	11 f0       	breq	.+4      	; 0xd5c <puts+0x5e>
     d58:	cf ef       	ldi	r28, 0xFF	; 255
     d5a:	df ef       	ldi	r29, 0xFF	; 255
     d5c:	ce 01       	movw	r24, r28
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <vfprintf>:
     d68:	2f 92       	push	r2
     d6a:	3f 92       	push	r3
     d6c:	4f 92       	push	r4
     d6e:	5f 92       	push	r5
     d70:	6f 92       	push	r6
     d72:	7f 92       	push	r7
     d74:	8f 92       	push	r8
     d76:	9f 92       	push	r9
     d78:	af 92       	push	r10
     d7a:	bf 92       	push	r11
     d7c:	cf 92       	push	r12
     d7e:	df 92       	push	r13
     d80:	ef 92       	push	r14
     d82:	ff 92       	push	r15
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	2b 97       	sbiw	r28, 0x0b	; 11
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	3c 01       	movw	r6, r24
     d9e:	2b 01       	movw	r4, r22
     da0:	5a 01       	movw	r10, r20
     da2:	fc 01       	movw	r30, r24
     da4:	17 82       	std	Z+7, r1	; 0x07
     da6:	16 82       	std	Z+6, r1	; 0x06
     da8:	83 81       	ldd	r24, Z+3	; 0x03
     daa:	81 fd       	sbrc	r24, 1
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <vfprintf+0x4c>
     dae:	6f ef       	ldi	r22, 0xFF	; 255
     db0:	7f ef       	ldi	r23, 0xFF	; 255
     db2:	c6 c1       	rjmp	.+908    	; 0x1140 <__stack+0x41>
     db4:	9a e0       	ldi	r25, 0x0A	; 10
     db6:	89 2e       	mov	r8, r25
     db8:	1e 01       	movw	r2, r28
     dba:	08 94       	sec
     dbc:	21 1c       	adc	r2, r1
     dbe:	31 1c       	adc	r3, r1
     dc0:	f3 01       	movw	r30, r6
     dc2:	23 81       	ldd	r18, Z+3	; 0x03
     dc4:	f2 01       	movw	r30, r4
     dc6:	23 fd       	sbrc	r18, 3
     dc8:	85 91       	lpm	r24, Z+
     dca:	23 ff       	sbrs	r18, 3
     dcc:	81 91       	ld	r24, Z+
     dce:	2f 01       	movw	r4, r30
     dd0:	88 23       	and	r24, r24
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <vfprintf+0x6e>
     dd4:	b2 c1       	rjmp	.+868    	; 0x113a <__stack+0x3b>
     dd6:	85 32       	cpi	r24, 0x25	; 37
     dd8:	39 f4       	brne	.+14     	; 0xde8 <vfprintf+0x80>
     dda:	23 fd       	sbrc	r18, 3
     ddc:	85 91       	lpm	r24, Z+
     dde:	23 ff       	sbrs	r18, 3
     de0:	81 91       	ld	r24, Z+
     de2:	2f 01       	movw	r4, r30
     de4:	85 32       	cpi	r24, 0x25	; 37
     de6:	29 f4       	brne	.+10     	; 0xdf2 <vfprintf+0x8a>
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	b3 01       	movw	r22, r6
     dec:	0e 94 12 09 	call	0x1224	; 0x1224 <fputc>
     df0:	e7 cf       	rjmp	.-50     	; 0xdc0 <vfprintf+0x58>
     df2:	98 2f       	mov	r25, r24
     df4:	ff 24       	eor	r15, r15
     df6:	ee 24       	eor	r14, r14
     df8:	99 24       	eor	r9, r9
     dfa:	ff e1       	ldi	r31, 0x1F	; 31
     dfc:	ff 15       	cp	r31, r15
     dfe:	d0 f0       	brcs	.+52     	; 0xe34 <vfprintf+0xcc>
     e00:	9b 32       	cpi	r25, 0x2B	; 43
     e02:	69 f0       	breq	.+26     	; 0xe1e <vfprintf+0xb6>
     e04:	9c 32       	cpi	r25, 0x2C	; 44
     e06:	28 f4       	brcc	.+10     	; 0xe12 <vfprintf+0xaa>
     e08:	90 32       	cpi	r25, 0x20	; 32
     e0a:	59 f0       	breq	.+22     	; 0xe22 <vfprintf+0xba>
     e0c:	93 32       	cpi	r25, 0x23	; 35
     e0e:	91 f4       	brne	.+36     	; 0xe34 <vfprintf+0xcc>
     e10:	0e c0       	rjmp	.+28     	; 0xe2e <vfprintf+0xc6>
     e12:	9d 32       	cpi	r25, 0x2D	; 45
     e14:	49 f0       	breq	.+18     	; 0xe28 <vfprintf+0xc0>
     e16:	90 33       	cpi	r25, 0x30	; 48
     e18:	69 f4       	brne	.+26     	; 0xe34 <vfprintf+0xcc>
     e1a:	41 e0       	ldi	r20, 0x01	; 1
     e1c:	24 c0       	rjmp	.+72     	; 0xe66 <vfprintf+0xfe>
     e1e:	52 e0       	ldi	r21, 0x02	; 2
     e20:	f5 2a       	or	r15, r21
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	f8 2a       	or	r15, r24
     e26:	28 c0       	rjmp	.+80     	; 0xe78 <vfprintf+0x110>
     e28:	98 e0       	ldi	r25, 0x08	; 8
     e2a:	f9 2a       	or	r15, r25
     e2c:	25 c0       	rjmp	.+74     	; 0xe78 <vfprintf+0x110>
     e2e:	e0 e1       	ldi	r30, 0x10	; 16
     e30:	fe 2a       	or	r15, r30
     e32:	22 c0       	rjmp	.+68     	; 0xe78 <vfprintf+0x110>
     e34:	f7 fc       	sbrc	r15, 7
     e36:	29 c0       	rjmp	.+82     	; 0xe8a <vfprintf+0x122>
     e38:	89 2f       	mov	r24, r25
     e3a:	80 53       	subi	r24, 0x30	; 48
     e3c:	8a 30       	cpi	r24, 0x0A	; 10
     e3e:	70 f4       	brcc	.+28     	; 0xe5c <vfprintf+0xf4>
     e40:	f6 fe       	sbrs	r15, 6
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <vfprintf+0xe6>
     e44:	98 9c       	mul	r9, r8
     e46:	90 2c       	mov	r9, r0
     e48:	11 24       	eor	r1, r1
     e4a:	98 0e       	add	r9, r24
     e4c:	15 c0       	rjmp	.+42     	; 0xe78 <vfprintf+0x110>
     e4e:	e8 9c       	mul	r14, r8
     e50:	e0 2c       	mov	r14, r0
     e52:	11 24       	eor	r1, r1
     e54:	e8 0e       	add	r14, r24
     e56:	f0 e2       	ldi	r31, 0x20	; 32
     e58:	ff 2a       	or	r15, r31
     e5a:	0e c0       	rjmp	.+28     	; 0xe78 <vfprintf+0x110>
     e5c:	9e 32       	cpi	r25, 0x2E	; 46
     e5e:	29 f4       	brne	.+10     	; 0xe6a <vfprintf+0x102>
     e60:	f6 fc       	sbrc	r15, 6
     e62:	6b c1       	rjmp	.+726    	; 0x113a <__stack+0x3b>
     e64:	40 e4       	ldi	r20, 0x40	; 64
     e66:	f4 2a       	or	r15, r20
     e68:	07 c0       	rjmp	.+14     	; 0xe78 <vfprintf+0x110>
     e6a:	9c 36       	cpi	r25, 0x6C	; 108
     e6c:	19 f4       	brne	.+6      	; 0xe74 <vfprintf+0x10c>
     e6e:	50 e8       	ldi	r21, 0x80	; 128
     e70:	f5 2a       	or	r15, r21
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <vfprintf+0x110>
     e74:	98 36       	cpi	r25, 0x68	; 104
     e76:	49 f4       	brne	.+18     	; 0xe8a <vfprintf+0x122>
     e78:	f2 01       	movw	r30, r4
     e7a:	23 fd       	sbrc	r18, 3
     e7c:	95 91       	lpm	r25, Z+
     e7e:	23 ff       	sbrs	r18, 3
     e80:	91 91       	ld	r25, Z+
     e82:	2f 01       	movw	r4, r30
     e84:	99 23       	and	r25, r25
     e86:	09 f0       	breq	.+2      	; 0xe8a <vfprintf+0x122>
     e88:	b8 cf       	rjmp	.-144    	; 0xdfa <vfprintf+0x92>
     e8a:	89 2f       	mov	r24, r25
     e8c:	85 54       	subi	r24, 0x45	; 69
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	18 f0       	brcs	.+6      	; 0xe98 <vfprintf+0x130>
     e92:	80 52       	subi	r24, 0x20	; 32
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	38 f4       	brcc	.+14     	; 0xea6 <vfprintf+0x13e>
     e98:	44 e0       	ldi	r20, 0x04	; 4
     e9a:	50 e0       	ldi	r21, 0x00	; 0
     e9c:	a4 0e       	add	r10, r20
     e9e:	b5 1e       	adc	r11, r21
     ea0:	5f e3       	ldi	r21, 0x3F	; 63
     ea2:	59 83       	std	Y+1, r21	; 0x01
     ea4:	0f c0       	rjmp	.+30     	; 0xec4 <vfprintf+0x15c>
     ea6:	93 36       	cpi	r25, 0x63	; 99
     ea8:	31 f0       	breq	.+12     	; 0xeb6 <vfprintf+0x14e>
     eaa:	93 37       	cpi	r25, 0x73	; 115
     eac:	79 f0       	breq	.+30     	; 0xecc <vfprintf+0x164>
     eae:	93 35       	cpi	r25, 0x53	; 83
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <vfprintf+0x14c>
     eb2:	56 c0       	rjmp	.+172    	; 0xf60 <vfprintf+0x1f8>
     eb4:	20 c0       	rjmp	.+64     	; 0xef6 <vfprintf+0x18e>
     eb6:	f5 01       	movw	r30, r10
     eb8:	80 81       	ld	r24, Z
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	42 e0       	ldi	r20, 0x02	; 2
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	a4 0e       	add	r10, r20
     ec2:	b5 1e       	adc	r11, r21
     ec4:	61 01       	movw	r12, r2
     ec6:	01 e0       	ldi	r16, 0x01	; 1
     ec8:	10 e0       	ldi	r17, 0x00	; 0
     eca:	12 c0       	rjmp	.+36     	; 0xef0 <vfprintf+0x188>
     ecc:	f5 01       	movw	r30, r10
     ece:	c0 80       	ld	r12, Z
     ed0:	d1 80       	ldd	r13, Z+1	; 0x01
     ed2:	f6 fc       	sbrc	r15, 6
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <vfprintf+0x174>
     ed6:	6f ef       	ldi	r22, 0xFF	; 255
     ed8:	7f ef       	ldi	r23, 0xFF	; 255
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <vfprintf+0x178>
     edc:	69 2d       	mov	r22, r9
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	42 e0       	ldi	r20, 0x02	; 2
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	a4 0e       	add	r10, r20
     ee6:	b5 1e       	adc	r11, r21
     ee8:	c6 01       	movw	r24, r12
     eea:	0e 94 c5 08 	call	0x118a	; 0x118a <strnlen>
     eee:	8c 01       	movw	r16, r24
     ef0:	5f e7       	ldi	r21, 0x7F	; 127
     ef2:	f5 22       	and	r15, r21
     ef4:	14 c0       	rjmp	.+40     	; 0xf1e <vfprintf+0x1b6>
     ef6:	f5 01       	movw	r30, r10
     ef8:	c0 80       	ld	r12, Z
     efa:	d1 80       	ldd	r13, Z+1	; 0x01
     efc:	f6 fc       	sbrc	r15, 6
     efe:	03 c0       	rjmp	.+6      	; 0xf06 <vfprintf+0x19e>
     f00:	6f ef       	ldi	r22, 0xFF	; 255
     f02:	7f ef       	ldi	r23, 0xFF	; 255
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x1a2>
     f06:	69 2d       	mov	r22, r9
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	42 e0       	ldi	r20, 0x02	; 2
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	a4 0e       	add	r10, r20
     f10:	b5 1e       	adc	r11, r21
     f12:	c6 01       	movw	r24, r12
     f14:	0e 94 ba 08 	call	0x1174	; 0x1174 <strnlen_P>
     f18:	8c 01       	movw	r16, r24
     f1a:	50 e8       	ldi	r21, 0x80	; 128
     f1c:	f5 2a       	or	r15, r21
     f1e:	f3 fe       	sbrs	r15, 3
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <vfprintf+0x1c8>
     f22:	1a c0       	rjmp	.+52     	; 0xf58 <vfprintf+0x1f0>
     f24:	80 e2       	ldi	r24, 0x20	; 32
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	b3 01       	movw	r22, r6
     f2a:	0e 94 12 09 	call	0x1224	; 0x1224 <fputc>
     f2e:	ea 94       	dec	r14
     f30:	8e 2d       	mov	r24, r14
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	08 17       	cp	r16, r24
     f36:	19 07       	cpc	r17, r25
     f38:	a8 f3       	brcs	.-22     	; 0xf24 <vfprintf+0x1bc>
     f3a:	0e c0       	rjmp	.+28     	; 0xf58 <vfprintf+0x1f0>
     f3c:	f6 01       	movw	r30, r12
     f3e:	f7 fc       	sbrc	r15, 7
     f40:	85 91       	lpm	r24, Z+
     f42:	f7 fe       	sbrs	r15, 7
     f44:	81 91       	ld	r24, Z+
     f46:	6f 01       	movw	r12, r30
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	b3 01       	movw	r22, r6
     f4c:	0e 94 12 09 	call	0x1224	; 0x1224 <fputc>
     f50:	e1 10       	cpse	r14, r1
     f52:	ea 94       	dec	r14
     f54:	01 50       	subi	r16, 0x01	; 1
     f56:	10 40       	sbci	r17, 0x00	; 0
     f58:	01 15       	cp	r16, r1
     f5a:	11 05       	cpc	r17, r1
     f5c:	79 f7       	brne	.-34     	; 0xf3c <vfprintf+0x1d4>
     f5e:	ea c0       	rjmp	.+468    	; 0x1134 <__stack+0x35>
     f60:	94 36       	cpi	r25, 0x64	; 100
     f62:	11 f0       	breq	.+4      	; 0xf68 <vfprintf+0x200>
     f64:	99 36       	cpi	r25, 0x69	; 105
     f66:	69 f5       	brne	.+90     	; 0xfc2 <vfprintf+0x25a>
     f68:	f7 fe       	sbrs	r15, 7
     f6a:	08 c0       	rjmp	.+16     	; 0xf7c <vfprintf+0x214>
     f6c:	f5 01       	movw	r30, r10
     f6e:	20 81       	ld	r18, Z
     f70:	31 81       	ldd	r19, Z+1	; 0x01
     f72:	42 81       	ldd	r20, Z+2	; 0x02
     f74:	53 81       	ldd	r21, Z+3	; 0x03
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0a c0       	rjmp	.+20     	; 0xf90 <vfprintf+0x228>
     f7c:	f5 01       	movw	r30, r10
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	9c 01       	movw	r18, r24
     f84:	44 27       	eor	r20, r20
     f86:	37 fd       	sbrc	r19, 7
     f88:	40 95       	com	r20
     f8a:	54 2f       	mov	r21, r20
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a8 0e       	add	r10, r24
     f92:	b9 1e       	adc	r11, r25
     f94:	9f e6       	ldi	r25, 0x6F	; 111
     f96:	f9 22       	and	r15, r25
     f98:	57 ff       	sbrs	r21, 7
     f9a:	09 c0       	rjmp	.+18     	; 0xfae <vfprintf+0x246>
     f9c:	50 95       	com	r21
     f9e:	40 95       	com	r20
     fa0:	30 95       	com	r19
     fa2:	21 95       	neg	r18
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	4f 4f       	sbci	r20, 0xFF	; 255
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	e0 e8       	ldi	r30, 0x80	; 128
     fac:	fe 2a       	or	r15, r30
     fae:	ca 01       	movw	r24, r20
     fb0:	b9 01       	movw	r22, r18
     fb2:	a1 01       	movw	r20, r2
     fb4:	2a e0       	ldi	r18, 0x0A	; 10
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	0e 94 3e 09 	call	0x127c	; 0x127c <__ultoa_invert>
     fbc:	d8 2e       	mov	r13, r24
     fbe:	d2 18       	sub	r13, r2
     fc0:	40 c0       	rjmp	.+128    	; 0x1042 <vfprintf+0x2da>
     fc2:	95 37       	cpi	r25, 0x75	; 117
     fc4:	29 f4       	brne	.+10     	; 0xfd0 <vfprintf+0x268>
     fc6:	1f 2d       	mov	r17, r15
     fc8:	1f 7e       	andi	r17, 0xEF	; 239
     fca:	2a e0       	ldi	r18, 0x0A	; 10
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	1d c0       	rjmp	.+58     	; 0x100a <vfprintf+0x2a2>
     fd0:	1f 2d       	mov	r17, r15
     fd2:	19 7f       	andi	r17, 0xF9	; 249
     fd4:	9f 36       	cpi	r25, 0x6F	; 111
     fd6:	61 f0       	breq	.+24     	; 0xff0 <vfprintf+0x288>
     fd8:	90 37       	cpi	r25, 0x70	; 112
     fda:	20 f4       	brcc	.+8      	; 0xfe4 <vfprintf+0x27c>
     fdc:	98 35       	cpi	r25, 0x58	; 88
     fde:	09 f0       	breq	.+2      	; 0xfe2 <vfprintf+0x27a>
     fe0:	ac c0       	rjmp	.+344    	; 0x113a <__stack+0x3b>
     fe2:	0f c0       	rjmp	.+30     	; 0x1002 <vfprintf+0x29a>
     fe4:	90 37       	cpi	r25, 0x70	; 112
     fe6:	39 f0       	breq	.+14     	; 0xff6 <vfprintf+0x28e>
     fe8:	98 37       	cpi	r25, 0x78	; 120
     fea:	09 f0       	breq	.+2      	; 0xfee <vfprintf+0x286>
     fec:	a6 c0       	rjmp	.+332    	; 0x113a <__stack+0x3b>
     fee:	04 c0       	rjmp	.+8      	; 0xff8 <vfprintf+0x290>
     ff0:	28 e0       	ldi	r18, 0x08	; 8
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	0a c0       	rjmp	.+20     	; 0x100a <vfprintf+0x2a2>
     ff6:	10 61       	ori	r17, 0x10	; 16
     ff8:	14 fd       	sbrc	r17, 4
     ffa:	14 60       	ori	r17, 0x04	; 4
     ffc:	20 e1       	ldi	r18, 0x10	; 16
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	04 c0       	rjmp	.+8      	; 0x100a <vfprintf+0x2a2>
    1002:	14 fd       	sbrc	r17, 4
    1004:	16 60       	ori	r17, 0x06	; 6
    1006:	20 e1       	ldi	r18, 0x10	; 16
    1008:	32 e0       	ldi	r19, 0x02	; 2
    100a:	17 ff       	sbrs	r17, 7
    100c:	08 c0       	rjmp	.+16     	; 0x101e <vfprintf+0x2b6>
    100e:	f5 01       	movw	r30, r10
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	44 e0       	ldi	r20, 0x04	; 4
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	08 c0       	rjmp	.+16     	; 0x102e <vfprintf+0x2c6>
    101e:	f5 01       	movw	r30, r10
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	bc 01       	movw	r22, r24
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	42 e0       	ldi	r20, 0x02	; 2
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	a4 0e       	add	r10, r20
    1030:	b5 1e       	adc	r11, r21
    1032:	a1 01       	movw	r20, r2
    1034:	0e 94 3e 09 	call	0x127c	; 0x127c <__ultoa_invert>
    1038:	d8 2e       	mov	r13, r24
    103a:	d2 18       	sub	r13, r2
    103c:	8f e7       	ldi	r24, 0x7F	; 127
    103e:	f8 2e       	mov	r15, r24
    1040:	f1 22       	and	r15, r17
    1042:	f6 fe       	sbrs	r15, 6
    1044:	0b c0       	rjmp	.+22     	; 0x105c <vfprintf+0x2f4>
    1046:	5e ef       	ldi	r21, 0xFE	; 254
    1048:	f5 22       	and	r15, r21
    104a:	d9 14       	cp	r13, r9
    104c:	38 f4       	brcc	.+14     	; 0x105c <vfprintf+0x2f4>
    104e:	f4 fe       	sbrs	r15, 4
    1050:	07 c0       	rjmp	.+14     	; 0x1060 <vfprintf+0x2f8>
    1052:	f2 fc       	sbrc	r15, 2
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <vfprintf+0x2f8>
    1056:	8f ee       	ldi	r24, 0xEF	; 239
    1058:	f8 22       	and	r15, r24
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <vfprintf+0x2f8>
    105c:	1d 2d       	mov	r17, r13
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <vfprintf+0x2fa>
    1060:	19 2d       	mov	r17, r9
    1062:	f4 fe       	sbrs	r15, 4
    1064:	0d c0       	rjmp	.+26     	; 0x1080 <vfprintf+0x318>
    1066:	fe 01       	movw	r30, r28
    1068:	ed 0d       	add	r30, r13
    106a:	f1 1d       	adc	r31, r1
    106c:	80 81       	ld	r24, Z
    106e:	80 33       	cpi	r24, 0x30	; 48
    1070:	19 f4       	brne	.+6      	; 0x1078 <vfprintf+0x310>
    1072:	99 ee       	ldi	r25, 0xE9	; 233
    1074:	f9 22       	and	r15, r25
    1076:	08 c0       	rjmp	.+16     	; 0x1088 <vfprintf+0x320>
    1078:	1f 5f       	subi	r17, 0xFF	; 255
    107a:	f2 fe       	sbrs	r15, 2
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <vfprintf+0x320>
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <vfprintf+0x31e>
    1080:	8f 2d       	mov	r24, r15
    1082:	86 78       	andi	r24, 0x86	; 134
    1084:	09 f0       	breq	.+2      	; 0x1088 <vfprintf+0x320>
    1086:	1f 5f       	subi	r17, 0xFF	; 255
    1088:	0f 2d       	mov	r16, r15
    108a:	f3 fc       	sbrc	r15, 3
    108c:	14 c0       	rjmp	.+40     	; 0x10b6 <vfprintf+0x34e>
    108e:	f0 fe       	sbrs	r15, 0
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <vfprintf+0x348>
    1092:	1e 15       	cp	r17, r14
    1094:	10 f0       	brcs	.+4      	; 0x109a <vfprintf+0x332>
    1096:	9d 2c       	mov	r9, r13
    1098:	0b c0       	rjmp	.+22     	; 0x10b0 <vfprintf+0x348>
    109a:	9d 2c       	mov	r9, r13
    109c:	9e 0c       	add	r9, r14
    109e:	91 1a       	sub	r9, r17
    10a0:	1e 2d       	mov	r17, r14
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <vfprintf+0x348>
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	b3 01       	movw	r22, r6
    10aa:	0e 94 12 09 	call	0x1224	; 0x1224 <fputc>
    10ae:	1f 5f       	subi	r17, 0xFF	; 255
    10b0:	1e 15       	cp	r17, r14
    10b2:	c0 f3       	brcs	.-16     	; 0x10a4 <vfprintf+0x33c>
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <vfprintf+0x356>
    10b6:	1e 15       	cp	r17, r14
    10b8:	10 f4       	brcc	.+4      	; 0x10be <vfprintf+0x356>
    10ba:	e1 1a       	sub	r14, r17
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <vfprintf+0x358>
    10be:	ee 24       	eor	r14, r14
    10c0:	04 ff       	sbrs	r16, 4
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <vfprintf+0x37a>
    10c4:	80 e3       	ldi	r24, 0x30	; 48
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	b3 01       	movw	r22, r6
    10ca:	0e 94 12 09 	call	0x1224	; 0x1224 <fputc>
    10ce:	02 ff       	sbrs	r16, 2
    10d0:	1d c0       	rjmp	.+58     	; 0x110c <__stack+0xd>
    10d2:	01 fd       	sbrc	r16, 1
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <vfprintf+0x374>
    10d6:	88 e7       	ldi	r24, 0x78	; 120
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e c0       	rjmp	.+28     	; 0x10f8 <vfprintf+0x390>
    10dc:	88 e5       	ldi	r24, 0x58	; 88
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0b c0       	rjmp	.+22     	; 0x10f8 <vfprintf+0x390>
    10e2:	80 2f       	mov	r24, r16
    10e4:	86 78       	andi	r24, 0x86	; 134
    10e6:	91 f0       	breq	.+36     	; 0x110c <__stack+0xd>
    10e8:	01 ff       	sbrs	r16, 1
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <vfprintf+0x388>
    10ec:	8b e2       	ldi	r24, 0x2B	; 43
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <vfprintf+0x38a>
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	f7 fc       	sbrc	r15, 7
    10f4:	8d e2       	ldi	r24, 0x2D	; 45
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	b3 01       	movw	r22, r6
    10fa:	0e 94 12 09 	call	0x1224	; 0x1224 <fputc>
    10fe:	06 c0       	rjmp	.+12     	; 0x110c <__stack+0xd>
    1100:	80 e3       	ldi	r24, 0x30	; 48
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	b3 01       	movw	r22, r6
    1106:	0e 94 12 09 	call	0x1224	; 0x1224 <fputc>
    110a:	9a 94       	dec	r9
    110c:	d9 14       	cp	r13, r9
    110e:	c0 f3       	brcs	.-16     	; 0x1100 <__stack+0x1>
    1110:	da 94       	dec	r13
    1112:	f1 01       	movw	r30, r2
    1114:	ed 0d       	add	r30, r13
    1116:	f1 1d       	adc	r31, r1
    1118:	80 81       	ld	r24, Z
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	b3 01       	movw	r22, r6
    111e:	0e 94 12 09 	call	0x1224	; 0x1224 <fputc>
    1122:	dd 20       	and	r13, r13
    1124:	a9 f7       	brne	.-22     	; 0x1110 <__stack+0x11>
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <__stack+0x35>
    1128:	80 e2       	ldi	r24, 0x20	; 32
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	b3 01       	movw	r22, r6
    112e:	0e 94 12 09 	call	0x1224	; 0x1224 <fputc>
    1132:	ea 94       	dec	r14
    1134:	ee 20       	and	r14, r14
    1136:	c1 f7       	brne	.-16     	; 0x1128 <__stack+0x29>
    1138:	43 ce       	rjmp	.-890    	; 0xdc0 <vfprintf+0x58>
    113a:	f3 01       	movw	r30, r6
    113c:	66 81       	ldd	r22, Z+6	; 0x06
    113e:	77 81       	ldd	r23, Z+7	; 0x07
    1140:	cb 01       	movw	r24, r22
    1142:	2b 96       	adiw	r28, 0x0b	; 11
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	ef 90       	pop	r14
    115a:	df 90       	pop	r13
    115c:	cf 90       	pop	r12
    115e:	bf 90       	pop	r11
    1160:	af 90       	pop	r10
    1162:	9f 90       	pop	r9
    1164:	8f 90       	pop	r8
    1166:	7f 90       	pop	r7
    1168:	6f 90       	pop	r6
    116a:	5f 90       	pop	r5
    116c:	4f 90       	pop	r4
    116e:	3f 90       	pop	r3
    1170:	2f 90       	pop	r2
    1172:	08 95       	ret

00001174 <strnlen_P>:
    1174:	fc 01       	movw	r30, r24
    1176:	05 90       	lpm	r0, Z+
    1178:	61 50       	subi	r22, 0x01	; 1
    117a:	70 40       	sbci	r23, 0x00	; 0
    117c:	01 10       	cpse	r0, r1
    117e:	d8 f7       	brcc	.-10     	; 0x1176 <strnlen_P+0x2>
    1180:	80 95       	com	r24
    1182:	90 95       	com	r25
    1184:	8e 0f       	add	r24, r30
    1186:	9f 1f       	adc	r25, r31
    1188:	08 95       	ret

0000118a <strnlen>:
    118a:	fc 01       	movw	r30, r24
    118c:	61 50       	subi	r22, 0x01	; 1
    118e:	70 40       	sbci	r23, 0x00	; 0
    1190:	01 90       	ld	r0, Z+
    1192:	01 10       	cpse	r0, r1
    1194:	d8 f7       	brcc	.-10     	; 0x118c <strnlen+0x2>
    1196:	80 95       	com	r24
    1198:	90 95       	com	r25
    119a:	8e 0f       	add	r24, r30
    119c:	9f 1f       	adc	r25, r31
    119e:	08 95       	ret

000011a0 <fgetc>:
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	ec 01       	movw	r28, r24
    11a6:	4b 81       	ldd	r20, Y+3	; 0x03
    11a8:	40 ff       	sbrs	r20, 0
    11aa:	1a c0       	rjmp	.+52     	; 0x11e0 <fgetc+0x40>
    11ac:	46 ff       	sbrs	r20, 6
    11ae:	0a c0       	rjmp	.+20     	; 0x11c4 <fgetc+0x24>
    11b0:	4f 7b       	andi	r20, 0xBF	; 191
    11b2:	4b 83       	std	Y+3, r20	; 0x03
    11b4:	8e 81       	ldd	r24, Y+6	; 0x06
    11b6:	9f 81       	ldd	r25, Y+7	; 0x07
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	9f 83       	std	Y+7, r25	; 0x07
    11bc:	8e 83       	std	Y+6, r24	; 0x06
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	2b c0       	rjmp	.+86     	; 0x121a <fgetc+0x7a>
    11c4:	42 ff       	sbrs	r20, 2
    11c6:	13 c0       	rjmp	.+38     	; 0x11ee <fgetc+0x4e>
    11c8:	e8 81       	ld	r30, Y
    11ca:	f9 81       	ldd	r31, Y+1	; 0x01
    11cc:	80 81       	ld	r24, Z
    11ce:	28 2f       	mov	r18, r24
    11d0:	33 27       	eor	r19, r19
    11d2:	27 fd       	sbrc	r18, 7
    11d4:	30 95       	com	r19
    11d6:	21 15       	cp	r18, r1
    11d8:	31 05       	cpc	r19, r1
    11da:	29 f4       	brne	.+10     	; 0x11e6 <fgetc+0x46>
    11dc:	40 62       	ori	r20, 0x20	; 32
    11de:	4b 83       	std	Y+3, r20	; 0x03
    11e0:	2f ef       	ldi	r18, 0xFF	; 255
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	1b c0       	rjmp	.+54     	; 0x121c <fgetc+0x7c>
    11e6:	31 96       	adiw	r30, 0x01	; 1
    11e8:	f9 83       	std	Y+1, r31	; 0x01
    11ea:	e8 83       	st	Y, r30
    11ec:	11 c0       	rjmp	.+34     	; 0x1210 <fgetc+0x70>
    11ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    11f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    11f2:	ce 01       	movw	r24, r28
    11f4:	09 95       	icall
    11f6:	9c 01       	movw	r18, r24
    11f8:	97 ff       	sbrs	r25, 7
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <fgetc+0x70>
    11fc:	9b 81       	ldd	r25, Y+3	; 0x03
    11fe:	2f 5f       	subi	r18, 0xFF	; 255
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	11 f0       	breq	.+4      	; 0x1208 <fgetc+0x68>
    1204:	80 e2       	ldi	r24, 0x20	; 32
    1206:	01 c0       	rjmp	.+2      	; 0x120a <fgetc+0x6a>
    1208:	80 e1       	ldi	r24, 0x10	; 16
    120a:	89 2b       	or	r24, r25
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	e8 cf       	rjmp	.-48     	; 0x11e0 <fgetc+0x40>
    1210:	8e 81       	ldd	r24, Y+6	; 0x06
    1212:	9f 81       	ldd	r25, Y+7	; 0x07
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	9f 83       	std	Y+7, r25	; 0x07
    1218:	8e 83       	std	Y+6, r24	; 0x06
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	c9 01       	movw	r24, r18
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <fputc>:
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	8c 01       	movw	r16, r24
    122e:	eb 01       	movw	r28, r22
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	81 ff       	sbrs	r24, 1
    1234:	1b c0       	rjmp	.+54     	; 0x126c <fputc+0x48>
    1236:	82 ff       	sbrs	r24, 2
    1238:	0d c0       	rjmp	.+26     	; 0x1254 <fputc+0x30>
    123a:	2e 81       	ldd	r18, Y+6	; 0x06
    123c:	3f 81       	ldd	r19, Y+7	; 0x07
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	28 17       	cp	r18, r24
    1244:	39 07       	cpc	r19, r25
    1246:	64 f4       	brge	.+24     	; 0x1260 <fputc+0x3c>
    1248:	e8 81       	ld	r30, Y
    124a:	f9 81       	ldd	r31, Y+1	; 0x01
    124c:	01 93       	st	Z+, r16
    124e:	f9 83       	std	Y+1, r31	; 0x01
    1250:	e8 83       	st	Y, r30
    1252:	06 c0       	rjmp	.+12     	; 0x1260 <fputc+0x3c>
    1254:	e8 85       	ldd	r30, Y+8	; 0x08
    1256:	f9 85       	ldd	r31, Y+9	; 0x09
    1258:	80 2f       	mov	r24, r16
    125a:	09 95       	icall
    125c:	89 2b       	or	r24, r25
    125e:	31 f4       	brne	.+12     	; 0x126c <fputc+0x48>
    1260:	8e 81       	ldd	r24, Y+6	; 0x06
    1262:	9f 81       	ldd	r25, Y+7	; 0x07
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	9f 83       	std	Y+7, r25	; 0x07
    1268:	8e 83       	std	Y+6, r24	; 0x06
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <fputc+0x4c>
    126c:	0f ef       	ldi	r16, 0xFF	; 255
    126e:	1f ef       	ldi	r17, 0xFF	; 255
    1270:	c8 01       	movw	r24, r16
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	08 95       	ret

0000127c <__ultoa_invert>:
    127c:	fa 01       	movw	r30, r20
    127e:	aa 27       	eor	r26, r26
    1280:	28 30       	cpi	r18, 0x08	; 8
    1282:	51 f1       	breq	.+84     	; 0x12d8 <__ultoa_invert+0x5c>
    1284:	20 31       	cpi	r18, 0x10	; 16
    1286:	81 f1       	breq	.+96     	; 0x12e8 <__ultoa_invert+0x6c>
    1288:	e8 94       	clt
    128a:	6f 93       	push	r22
    128c:	6e 7f       	andi	r22, 0xFE	; 254
    128e:	6e 5f       	subi	r22, 0xFE	; 254
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	8f 4f       	sbci	r24, 0xFF	; 255
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	af 4f       	sbci	r26, 0xFF	; 255
    1298:	b1 e0       	ldi	r27, 0x01	; 1
    129a:	3e d0       	rcall	.+124    	; 0x1318 <__ultoa_invert+0x9c>
    129c:	b4 e0       	ldi	r27, 0x04	; 4
    129e:	3c d0       	rcall	.+120    	; 0x1318 <__ultoa_invert+0x9c>
    12a0:	67 0f       	add	r22, r23
    12a2:	78 1f       	adc	r23, r24
    12a4:	89 1f       	adc	r24, r25
    12a6:	9a 1f       	adc	r25, r26
    12a8:	a1 1d       	adc	r26, r1
    12aa:	68 0f       	add	r22, r24
    12ac:	79 1f       	adc	r23, r25
    12ae:	8a 1f       	adc	r24, r26
    12b0:	91 1d       	adc	r25, r1
    12b2:	a1 1d       	adc	r26, r1
    12b4:	6a 0f       	add	r22, r26
    12b6:	71 1d       	adc	r23, r1
    12b8:	81 1d       	adc	r24, r1
    12ba:	91 1d       	adc	r25, r1
    12bc:	a1 1d       	adc	r26, r1
    12be:	20 d0       	rcall	.+64     	; 0x1300 <__ultoa_invert+0x84>
    12c0:	09 f4       	brne	.+2      	; 0x12c4 <__ultoa_invert+0x48>
    12c2:	68 94       	set
    12c4:	3f 91       	pop	r19
    12c6:	2a e0       	ldi	r18, 0x0A	; 10
    12c8:	26 9f       	mul	r18, r22
    12ca:	11 24       	eor	r1, r1
    12cc:	30 19       	sub	r19, r0
    12ce:	30 5d       	subi	r19, 0xD0	; 208
    12d0:	31 93       	st	Z+, r19
    12d2:	de f6       	brtc	.-74     	; 0x128a <__ultoa_invert+0xe>
    12d4:	cf 01       	movw	r24, r30
    12d6:	08 95       	ret
    12d8:	46 2f       	mov	r20, r22
    12da:	47 70       	andi	r20, 0x07	; 7
    12dc:	40 5d       	subi	r20, 0xD0	; 208
    12de:	41 93       	st	Z+, r20
    12e0:	b3 e0       	ldi	r27, 0x03	; 3
    12e2:	0f d0       	rcall	.+30     	; 0x1302 <__ultoa_invert+0x86>
    12e4:	c9 f7       	brne	.-14     	; 0x12d8 <__ultoa_invert+0x5c>
    12e6:	f6 cf       	rjmp	.-20     	; 0x12d4 <__ultoa_invert+0x58>
    12e8:	46 2f       	mov	r20, r22
    12ea:	4f 70       	andi	r20, 0x0F	; 15
    12ec:	40 5d       	subi	r20, 0xD0	; 208
    12ee:	4a 33       	cpi	r20, 0x3A	; 58
    12f0:	18 f0       	brcs	.+6      	; 0x12f8 <__ultoa_invert+0x7c>
    12f2:	49 5d       	subi	r20, 0xD9	; 217
    12f4:	31 fd       	sbrc	r19, 1
    12f6:	40 52       	subi	r20, 0x20	; 32
    12f8:	41 93       	st	Z+, r20
    12fa:	02 d0       	rcall	.+4      	; 0x1300 <__ultoa_invert+0x84>
    12fc:	a9 f7       	brne	.-22     	; 0x12e8 <__ultoa_invert+0x6c>
    12fe:	ea cf       	rjmp	.-44     	; 0x12d4 <__ultoa_invert+0x58>
    1300:	b4 e0       	ldi	r27, 0x04	; 4
    1302:	a6 95       	lsr	r26
    1304:	97 95       	ror	r25
    1306:	87 95       	ror	r24
    1308:	77 95       	ror	r23
    130a:	67 95       	ror	r22
    130c:	ba 95       	dec	r27
    130e:	c9 f7       	brne	.-14     	; 0x1302 <__ultoa_invert+0x86>
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	61 05       	cpc	r22, r1
    1314:	71 05       	cpc	r23, r1
    1316:	08 95       	ret
    1318:	9b 01       	movw	r18, r22
    131a:	ac 01       	movw	r20, r24
    131c:	0a 2e       	mov	r0, r26
    131e:	06 94       	lsr	r0
    1320:	57 95       	ror	r21
    1322:	47 95       	ror	r20
    1324:	37 95       	ror	r19
    1326:	27 95       	ror	r18
    1328:	ba 95       	dec	r27
    132a:	c9 f7       	brne	.-14     	; 0x131e <__ultoa_invert+0xa2>
    132c:	62 0f       	add	r22, r18
    132e:	73 1f       	adc	r23, r19
    1330:	84 1f       	adc	r24, r20
    1332:	95 1f       	adc	r25, r21
    1334:	a0 1d       	adc	r26, r0
    1336:	08 95       	ret

00001338 <_exit>:
    1338:	f8 94       	cli

0000133a <__stop_program>:
    133a:	ff cf       	rjmp	.-2      	; 0x133a <__stop_program>
